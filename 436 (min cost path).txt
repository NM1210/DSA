class Solution{
    static int maximumPath(int n, int mat[][])
    {
        int dp[][] = new int[n][n];
        for(int i = 0; i<n; i++){
            for(int j = 0; j<n; j++){
                dp[i][j] = mat[i][j];
            }
        }
        for(int i = n-2; i>=0; i--){
            for(int j = 0; j<n; j++){
                if(j-1>=0 && j+1<n){
                    dp[i][j] = mat[i][j] + Math.max(dp[i+1][j], Math.max(dp[i+1][j+1], dp[i+1][j-1]));
                }
                else if(j-1<0 && j+1<n){
                    dp[i][j] = mat[i][j] + Math.max(dp[i+1][j], dp[i+1][j+1]);
                }
                else if(j+1>=n && j-1>=0){
                    dp[i][j] = mat[i][j] + Math.max(dp[i+1][j], dp[i+1][j-1]);
                }
                else{
                    dp[i][j] = mat[i][j] + dp[i+1][j];
                }
            }
        }
        int max = Integer.MIN_VALUE;
        for(int j = 0; j<n; j++){
            if(dp[0][j]>max) max = dp[0][j];
        }
        return max;
    }
}