class Solution {
    public int[][] merge(int[][] intervals) {
        int n = intervals.length;
        // for(int i = 0; i<n; i++){
        //     System.out.println(intervals[i][0]+" "+intervals[i][1]);
        // }
        Arrays.sort(intervals, new Comparator<int[]>(){
            public int compare(int[] a, int[] b){
                return a[1]-b[1];
            }
        });
        // for(int i = 0; i<n; i++){
        //     System.out.println(intervals[i][0]+" "+intervals[i][1]);
        // }
        int temp[][] = new int[n][2];
        int k = 0;
        int i = n-1;
        while(i>0){
            if(intervals[i-1][1]>=intervals[i][0]){
                intervals[i-1][0] = Math.min(intervals[i][0], intervals[i-1][0]);
                intervals[i-1][1] = Math.max(intervals[i][1], intervals[i-1][1]);
            }
            else{
                temp[k][0] = intervals[i][0];
                temp[k][1] = intervals[i][1];
                k++;
            }
            i--;
        }
        temp[k][0] = intervals[0][0];
        temp[k][1] = intervals[0][1];
        k++;
        int ans[][] = new int[k][2];
        for(int j = 0; j<k; j++){
            ans[j][0] = temp[j][0];
            ans[j][1] = temp[j][1];
        }
        return ans;
    }
}