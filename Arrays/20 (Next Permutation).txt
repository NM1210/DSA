class Solution {
    void quicksort(int a[], int low, int high)
    {
        if(low<high){
            int index = partition(a, low, high);
            quicksort(a, low, index-1);
            quicksort(a, index+1, high);
        }
    }
    int partition(int a[], int low, int high)
    {
        int i = low;
        int p = low;
        int j = high;
        while(i<j){
            while(i<high && a[i]<=a[p]){
                i++;
            }
            while(a[j]>a[p]){
                j--;
            }
            if(i<j){
                int temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }
        }
        int temp = a[p];
        a[p] = a[j];
        a[j] = temp;
        return j;
    }
    public void nextPermutation(int[] a) {
        int n = a.length;
        int i = n-1;
        while(i>0 && a[i-1]>=a[i]){
            i--;
        }
        if(i==0){
            Arrays.sort(a);
        }
        else{
            int j = n-1;
            while(j>=i && a[j]<=a[i-1]){
                j--;
            }
            int temp = a[i-1];
            a[i-1] = a[j];
            a[j] = temp;
            Solution obj = new Solution();
            obj.quicksort(a, i, n-1);
        }
    }
}