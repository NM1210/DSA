        if(intervals.length == 0 || intervals.length == 1)
            return intervals;
        ArrayList<int[]> temp = new ArrayList<int[]>();
        for(int i = 0; i < intervals.length-1; i++){
            if(intervals[i][1] > intervals[i+1][0]){
                temp.add(new int[]{intervals[i][0], intervals[i+1][1]});
            }
            else{
                temp.add(intervals[i]);
            }
        }
        int[][] tempMatrix = temp.toArray();
        if(temp.size() == intervals.length)
            return tempMatrix;
        else
            return merge(tempMatrix);
________________________________________________________________________________________________

class Solution {
    public int[][] merge(int[][] intervals) {
        int count = 0;
        for(int i = 0; i<intervals.length; i++){
            if(i+1!=intervals.length && intervals[i+1][0]<=intervals[i][1]){
                intervals[i+1][0] = Math.min(intervals[i][0],intervals[i+1][0]);
                intervals[i+1][1] = Math.max(intervals[i][1],intervals[i+1][1]);
            }
            else{
                intervals[count][0] = intervals[i][0];
                intervals[count][1] = intervals[i][1];
                count++;
            }
        }
        int ans[][] = new int[count][2];
        for(int i = 0; i<count; i++){
            ans[i][0] = intervals[i][0];
            ans[i][1] = intervals[i][1];
        }
        return ans;
    }
}
