TRICKEY APPROACH (EFFICIENT):-

--Prerequisites:- Maximum difference between two elements such that larger element appears after the smaller number

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int profit[] = new int[n];
        int max = prices[n-1];
        for(int i=n-2; i>=0; i--){
            if(prices[i]>max) max = prices[i];
            profit[i] = Math.max(profit[i+1], max - prices[i]);
        }
        int min = prices[0];
        for(int i = 1; i<n; i++){
            if(prices[i]<min) min = prices[i];
            profit[i] = Math.max(profit[i-1], profit[i] + prices[i] - min);
        }
        return profit[n-1];
    }
}
_______________________________________________________________________________________

INITIAL THOUGHT PROCESS (INEFFICIENT):-

class Solution {
    public int profit(int[] a, int i, int j, boolean b, int sum){
        if(j>=a.length){
            // System.out.println(sum);
            return sum;
        }
        int max = 0;
        if(b==true){
            int k = i;
            while(k<=j){
                int temp = profit(a, k+1, j+1, !b, sum-a[k]);
                k++;
                if(temp>max) max = temp;
            }
        }
        else{
            int k = i;
            while(k<=j){
                int temp = profit(a, k+1, j+1, !b, sum+a[k]);
                k++;
                if(temp>max) max = temp;
            }
        }
        return max;
    }
    public int maxProfit(int[] prices) {
        int n = prices.length;
        if(n<2) return 0;
        int diff = 0;
        for(int i = 0; i<n-1; i++){
            for(int j = i+1; j<n; j++){
                if(prices[j]>prices[i] && prices[j]-prices[i]>diff) diff = prices[j]-prices[i];
            }
        }
        int ans = Math.max(diff, profit(prices, 0, n-4, true, 0));
        // System.out.println(ans);
        return ans;
    }
}