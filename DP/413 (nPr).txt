BOTTOM-UP:-

class Solution{
    static long factorial(long n){
        long fact = 1;
        for(int i = 1; i<=n; i++){
            fact *= i;
        }
        return fact;
    }
    
    static long nPr(long n, long r){
        if(r>n) return 0;
        long dp[][] = new long[(int)n+1][(int)r+1];
        for(int i = 0; i<=n; i++){
            dp[i][0] = 1; 
        }
        for(int i = 0; i<=n; i++){
            for(int j = 0; j<=r; j++){
                if(i>=j){
                    if(i-1>=0 && j-1>=0){
                        dp[i][j] = dp[i-1][j] + (j*dp[i-1][j-1]);
                    }
                }
            }
        }
        return dp[(int)n][(int)r];
    }
}

______________________________________________________________________________

MEMOIZATION:-

class Solution{
    static long dp[][];
    
    static long factorial(long n){
        long fact = 1;
        for(int i = 1; i<=n; i++){
            fact *= i;
        }
        return fact;
    }
    
    static long P(int n, int r){
        if(r==0) return 1;
        if(r==n) return factorial(n);
        if(dp[n][r]!=-1) return dp[n][r];
        dp[n][r] = P(n-1, r) + (r*P(n-1, r-1));
        return dp[n][r];
    }
    
    static long nPr(long n, long r){
        if(r>n) return 0;
        dp = new long[(int)n+1][(int)r+1];
        for(long row[]: dp){
            Arrays.fill(row, -1);
        }
        // for(int i = 0; i<=n; i++){
        //     for(int j = 0; j<=r; j++){
        //         System.out.print(dp[i][j]+" ");
        //     }
        //     System.out.println();
        // }
        return P((int)n, (int)r);
        // return 0;
    }
}

__________________________________________________________________

RECURRSION:-

class Solution{
    static long factorial(long n){
        long fact = 1;
        for(int i = 1; i<=n; i++){
            fact *= i;
        }
        return fact;
    }
    static long nPr(long n, long r){
        if(r>n) return 0;
        if(r==0) return 1;
        if(r==n) return factorial(n);
        return nPr(n-1, r) + (r*nPr(n-1, r-1));
    }
}