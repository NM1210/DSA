BOTTOM-UP:-

class Solution {
    public int longestPalindromeSubseq(String s) {
        int n = s.length();
        int dp[][] = new int[n][n];
        for(int i = 0; i<n; i++){
            dp[i][i] = 1;
        }
        for(int l = 1; l<n; l++){
            for(int i = 0; i<n-l; i++){
                if(s.charAt(i)==s.charAt(i+l)){
                    dp[i][i+l] = dp[i+1][i+l-1]+2;
                }
                else{
                    dp[i][i+l] = Math.max(dp[i+1][i+l], dp[i][i+l-1]);
                }
            }
        }
        return dp[0][n-1];
    }
}
______________________________________________________________________________

RECURRSION:-

class Solution {
    public int LPS(String str, int i, int j){
        if(i>j) return 0;
        if(str.charAt(i)==str.charAt(j)){
            if(i==j) return 1+LPS(str, i+1, j-1);
            return 2+LPS(str, i+1, j-1);
        }
        else{
            return Math.max(LPS(str, i+1, j), LPS(str, i, j-1));
        }
    }
    public int longestPalindromeSubseq(String s) {
        return LPS(s, 0, s.length()-1);
    }
}