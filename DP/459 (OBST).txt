MEMOIZATION:-

class Solution
{
    static int dp[][][];
    static int obst(int key[], int freq[], int i, int j, int level){
        if(j<i) return 0;
        if(dp[i][j][level]!=-1) return dp[i][j][level];
        int min = Integer.MAX_VALUE;
        for(int root = i; root<=j; root++){
            int temp = freq[root]*level + obst(key, freq, root+1, j, level+1)
                                        + obst(key, freq, i, root-1, level+1);
            if(temp<min) min = temp;
        }
        return dp[i][j][level] = min;
    }
    static int optimalSearchTree(int keys[], int freq[], int n)
    {
        dp = new int[n][n][n+1];
        for(int mat[][]: dp){
            for(int row[]: mat){
                Arrays.fill(row, -1);
            }
        }
        obst(keys, freq, 0, n-1, 1);
        return dp[0][n-1][1];
    }
}
_____________________________________________________________________________________________

RECURRSION:-

class Solution
{
    static int obst(int key[], int freq[], int i, int j, int level){
        if(j<i) return 0;
        int min = Integer.MAX_VALUE;
        for(int root = i; root<=j; root++){
            int temp = freq[root]*level + obst(key, freq, root+1, j, level+1)
                                        + obst(key, freq, i, root-1, level+1);
            if(temp<min) min = temp;
        }
        return min;
    }
    static int optimalSearchTree(int keys[], int freq[], int n)
    {
        return obst(keys, freq, 0, n-1, 1);
    }
}