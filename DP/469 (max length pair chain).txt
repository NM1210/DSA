ACTIVITY SELECTION APPROACH (USING COMPARATOR):-

// ACCEPTED - CAN BE DONE WITHOUT USING PAIR CLASS, BY SORTING THE LIST OF PAIRS DIRECTLY USING COMPARATOR AND LAMBDA EXPRESSION:
// class Solution {
//     public int findLongestChain(int[][] pairs) {
//         Arrays.sort(pairs, (A, B) -> A[1] - B[1]);
//         int index = 0;
//         int lem = 0;
//         for (int i = 1; i < pairs.length; ++i) {
//             if (pairs[index][1] < pairs[i][0]) {
//                 index = i;
//                 ++lem;
//             }
//         }
//         return lem+1;
//     }
// }
// PRIORITY QUEUE CAN ALSO BE USED

class Pair{
    int start;
    int end;
    public Pair(int start, int end){
        this.start = start;
        this.end = end;
    }
}

class Solution {
    
    public int findLongestChain(int[][] pairs) {
        int n = pairs.length;
        int start[] = new int[n];
        int end[] = new int[n];
        for(int i = 0; i<n; i++){
            start[i] = pairs[i][0];
            end[i] = pairs[i][1];
        }
        Pair[] p = new Pair[n];
        for(int i = 0; i<n; i++){
            p[i] = new Pair(start[i], end[i]);
        }
        Arrays.sort(p, new Comparator<Pair>(){
            @Override
            public int compare(Pair first, Pair second){
                return first.end - second.end;
            }
        });
        
        // for(int i = 0; i<n; i++){
        //     System.out.println(pairs[i].start + " " + pairs[i].end);
        // }
        
        // int i = 0;
        // int count = 1;
        // for(int j = 1; j<n; j++){
        //     if(pairs[j].start>=pairs[i].end){
        //         count++;
        //         i=j;
        //     }
        // }
        
        int activity = Integer.MIN_VALUE;
        int count = 0;
        for(int i = 0; i<n; i++){
            if(p[i].start>activity){
                activity = p[i].end;
                count++;
            }
        }
        return count;
    }
}
__________________________________________________________________________________________
ACTIVITY SELECTION APPROACH (USING MERGE SORT):-

// REJECTED - STILL CAUSES TLE

class Solution {
    
    void merge(int a[], int b[], int l, int mid, int h){
        int i = l, j=mid+1, k = l;
        int end[] = new int[h+1];
        int start[] = new int[h+1];
        while(i<=mid && j<=h){
            if(a[i]<a[j]){
                end[k] = a[i];
                start[k] = b[i];
                i++;
            }
            else{
                end[k] = a[j];
                start[k] = b[j];
                j++;
            }
            k++;
        }
        while(i<=mid){
            end[k] = a[i];
            start[k] = b[i];
            i++;
            k++;
        }
        while(j<=h){
            end[k] = a[j];
            start[k] = b[j];
            j++;
            k++;
        }
        for(k = l; k<=h; k++){
            a[k] = end[k];
            b[k] = start[k];
        }
    }
    
    void divide(int a[], int b[], int l, int h){
        if(l<h){
            int mid = (l+h)/2;
            divide(a, b, 0, mid);
            divide(a, b, mid+1, h);
            merge(a, b, l, mid, h);
        }
    }
    
    public int findLongestChain(int[][] pairs) {
        int n = pairs.length;
        int start[] = new int[n];
        int end[] = new int[n];
        for(int i = 0; i<n; i++){
            start[i] = pairs[i][0];
            end[i] = pairs[i][1];
        }
        divide(end, start, 0, n-1);
        // for(int i = 0; i<n; i++){
        //     System.out.println(start[i]+" "+end[i]+" ");
        // }
        int count = 0;
        int activity = Integer.MIN_VALUE;
        for(int i = 0; i<n; i++){
            if(start[i]>activity){
                activity = end[i];
                count++;
            }
        }
        return count;
    }
}
___________________________________________________________________________________________________
MEMOIZATION:-

class Solution {
    HashMap<Pair, Integer> map = new HashMap<>();
    
    int select(int start[], int end[], int prev, int i, int n){
        Pair key = new Pair(prev, i);
        if(map.containsKey(key)) return map.get(key);		//MAKES ALL THE DIFFERENCE
        if(i>=n) return 0;
        if(start[i]>prev){
            int ans = Math.max(select(start, end, end[i], 0, n)+1,
                            select(start, end, prev, i+1, n));
            map.put(new Pair(prev, i), ans);
            return ans;
        }
        else{
            int ans = select(start, end, prev, i+1, n);
            map.put(new Pair(prev, i), ans);
            return ans;
        }
    }
    
    public int findLongestChain(int[][] pairs) {
        int n = pairs.length;
        int start[] = new int[n];
        int end[] = new int[n];
        for(int i = 0; i<n; i++){
            start[i] = pairs[i][0];
            end[i] = pairs[i][1];
        }
        int prev = Integer.MIN_VALUE;
        return select(start, end, prev, 0, n);
    }
}
_______________________________________________________________________
MEMOIZATION (FAILED-ATTEMPT) USING MAP (PROTOTYPE):-

class Solution {
    HashMap<Pair, Integer> map = new HashMap<>();
    
    boolean contains(Pair key){
        if(map.isEmpty()) return false;
        for(Pair p: map.keySet()){
            if(key.equals(p)) return true;
        }
        return false;
    }
    
    Integer get(Pair key){
        for(Pair p: map.keySet()){
            if(key.equals(p)) return map.get(p);
        }
        return -1;
    }
    
    int select(int start[], int end[], int prev, int i, int n){
        if(i>=n) return 0;
        Pair key = new Pair(prev, i);
        if(contains(key)){
            return get(key);
        }
        if(start[i]>prev){
            int ans = Math.max(select(start, end, end[i], 0, n)+1,
                            select(start, end, prev, i+1, n));
            map.put(new Pair(prev, i), ans);
            return ans;
        }
        else{
            int ans = select(start, end, prev, i+1, n);
            map.put(new Pair(prev, i), ans);
            return ans;
        }
    }
    
    public int findLongestChain(int[][] pairs) {
        int n = pairs.length;
        int start[] = new int[n];
        int end[] = new int[n];
        for(int i = 0; i<n; i++){
            start[i] = pairs[i][0];
            end[i] = pairs[i][1];
        }
        int prev = Integer.MIN_VALUE;
        return select(start, end, prev, 0, n);
    }
}
_____________________________________________________________________________________
RECURRSION:-

class Solution {
    // int dp[][];
    
    int select(int pairs[][], int prev, int i, int n){
        // if(dp[prev][i]!=-1) return dp[prev][i];
        if(i>=n) return 0;
        if(pairs[i][0]>prev){
            return Math.max(select(pairs, pairs[i][1], 0, n)+1,
                            select(pairs, prev, i+1, n));
        }
        else{
            return select(pairs, prev, i+1, n);
        }
    }
    
    public int findLongestChain(int[][] pairs) {
        int n = pairs.length;
        
        // int max = Integer.MIN_VALUE;
        // for(int i = 0; i<n; i++){
        //     if(pairs[i][1]>max) max = pairs[i][1];
        // }
        // dp = new int[max+1][n+1];    //DP TABLE WOULD BE TOO LARGE USE MAP INSTEAD
        // for(int row[]: dp){
        //     Arrays.fill(row, -1);
        // }
        
        int prev = Integer.MIN_VALUE;
        return select(pairs, prev, 0, n);
    }
}