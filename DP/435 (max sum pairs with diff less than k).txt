class Solution { 
    public static int maxSumPairWithDifferenceLessThanK(int a[], int n, int k) 
    {
        if(n==0) return 0;
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        Arrays.sort(a);
        for(int i = 0; i<n; i++){
            int f = i+1;
            int r = n-1;
            int val = a[i]+k;
            while(f<=r){
                int mid = (f+r)/2;
                if(val>a[mid]){
                    f = mid+1;
                }
                else if(val<a[mid]){
                    r = mid-1;
                }
                else{
                    r = mid-1;
                }
            }
            for(int j = i+1; j<=r; j++){
                ArrayList<Integer> element = new ArrayList<>();
                element.add(i);
                element.add(j);
                list.add(element);
            }
        }
        Collections.sort(list, new Comparator<ArrayList<Integer>>() {
            @Override
            public int compare(ArrayList<Integer> one, ArrayList<Integer> two) {
                return one.get(1)-two.get(1);
            }
        });
        // for(int i = 0; i<list.size(); i++){
        //     System.out.println(a[list.get(i).get(0)]+" "+a[list.get(i).get(1)]);
        // }
        int sum = 0;
        int end = list.size();
        if(end==0) return 0;
        int i = end-1;
        ArrayList<Integer> element = list.get(i);
        sum += a[element.get(0)]+a[element.get(1)];
        // System.out.println(sum);
        while(i>=0){
            if(list.get(i).get(0) != element.get(0) &&
               list.get(i).get(0) != element.get(1) &&
               list.get(i).get(1) != element.get(0) &&
               list.get(i).get(1) != element.get(1)){
                   element = list.get(i);
                   sum += a[element.get(0)]+a[element.get(1)];
                //   System.out.println(sum);
               }
            i--;
        }
        return sum;
    }
}
