SELF-CONSTRUCTED BOTTOM-UP APPROACH(NON-TRADITIONAL WAY):- 

//causes Integer overflow if BigInteger not used

class Solution
{
    public long countFriendsPairings(int n) 
    { 
       int dp[][] = new int[n+1][2+1];
       int p = (int)Math.pow(10, 9) + 7;
       for(int i = 0; i<n+1; i++){
           dp[i][0] = 1;
       }
       for(int i = 1; i<n+1; i++){
           for(int j = 1; j<=2; j++){
               dp[i][j] = (dp[i-1][j] + dp[i-1][j-1])%p;
           }
       }
    //   for(int i = 0; i<n+1; i++){
    //       for(int j = 0; j<=2; j++){
    //           System.out.print(dp[i][j]+" ");
    //       }
    //       System.out.println();
    //   }
       int a[] = new int[n+1];
       a[n] = dp[n][2];
       int sum = a[n];
       int count = 2;
       for(int i = n-2; i>=2; i-=2){
           int temp = (a[i+2]*dp[i][2])%p;
           a[i] = temp/count;
           sum = sum+a[i];
           count++;
       }
    //   for(int i = 0; i<n+1; i++){
    //       System.out.print(a[i]+" ");
    //   }
       return sum+1;
    }
}