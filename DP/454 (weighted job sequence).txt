class Solution {
    public int jobScheduling(int[] s, int[] e, int[] p) {
        int n = p.length;
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        for(int i = 0; i<n; i++){
            ArrayList<Integer> element = new ArrayList<>();
            element.add(s[i]);
            element.add(e[i]);
            element.add(p[i]);
            list.add(element);
        }
        // for(int i = 0; i<n; i++){
        //     System.out.println(list.get(i).get(0)+" "+list.get(i).get(1)+" "+list.get(i).get(2));
        // }
        Collections.sort(list, new Comparator<ArrayList<Integer>>() {
            @Override
            public int compare(ArrayList<Integer> one, ArrayList<Integer> two) {
                return one.get(1)-two.get(1);
            }
        });
        // for(int i = 0; i<n; i++){
        //     System.out.println(list.get(i).get(0)+" "+list.get(i).get(1)+" "+list.get(i).get(2));
        // }
        int dp[] = new int[n];
        dp[0] = list.get(0).get(2);
        for(int i = 1; i<n; i++){
            dp[i] = list.get(i).get(2);
            int element = list.get(i).get(0);
            int inc = list.get(i).get(2);
            int j = -1;
            int f = 0; 
            int r = i-1;
            while(f<=r){
                int mid = (f+r)/2;
                if(element>list.get(mid).get(1)){
                    j = mid;
                    f = mid + 1;
                }
                else if(element<list.get(mid).get(1)){
                    r = mid - 1;
                }
                else{
                    j = mid;
                    f = mid + 1;
                }
            }
            // j = f;
            // for(int k = 0; k<j; k++){
            if(j!=-1){
                inc += dp[j];
            }
            int exc = dp[i-1];
            dp[i] = Math.max(exc, inc);
            // dp[i] = Math.max(dp[i], dp[j]+list.get(i).get(2));
            // }
        }
        // int max = 0;
        // for(int i = 0; i<n; i++){
        //     max = Math.max(max, dp[i]);
        // }
        return dp[n-1];
    }
}
___________________________________________________________________________________________________________

class Solution {
    public int jobScheduling(int[] s, int[] e, int[] p) {
        int n = p.length;
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        for(int i = 0; i<n; i++){
            ArrayList<Integer> element = new ArrayList<>();
            element.add(s[i]);
            element.add(e[i]);
            element.add(p[i]);
            list.add(element);
        }
        // for(int i = 0; i<n; i++){
        //     System.out.println(list.get(i).get(0)+" "+list.get(i).get(1)+" "+list.get(i).get(2));
        // }
        Collections.sort(list, new Comparator<ArrayList<Integer>>() {
            @Override
            public int compare(ArrayList<Integer> one, ArrayList<Integer> two) {
                return one.get(1)-two.get(1);
            }
        });
        // for(int i = 0; i<n; i++){
        //     System.out.println(list.get(i).get(0)+" "+list.get(i).get(1)+" "+list.get(i).get(2));
        // }
        int dp[] = new int[n];
        dp[0] = list.get(0).get(2);
        for(int i = 1; i<n; i++){
            dp[i] = list.get(i).get(2);
            int element = list.get(i).get(0);
            int j = 0;
            int f = 0; 
            int r = i-1;
            while(f<=r){
                int mid = (f+r)/2;
                if(element>list.get(mid).get(1)){
                    f = mid + 1;
                }
                else if(element<list.get(mid).get(1)){
                    r = mid - 1;
                }
                else{
                    f = mid+1;
                }
            }
            j = f;
            for(int k = 0; k<j; k++){
                dp[i] = Math.max(dp[i], dp[j]+list.get(i).get(2));
            }
        }
        int max = 0;
        for(int i = 0; i<n; i++){
            max = Math.max(max, dp[i]);
        }
        return max;
    }
}
________________________________________________________________________________________________________________

class Solution {
    public int jobScheduling(int[] s, int[] e, int[] p) {
        int n = p.length;
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        for(int i = 0; i<n; i++){
            ArrayList<Integer> element = new ArrayList<>();
            element.add(s[i]);
            element.add(e[i]);
            element.add(p[i]);
            list.add(element);
        }
        // for(int i = 0; i<n; i++){
        //     System.out.println(list.get(i).get(0)+" "+list.get(i).get(1)+" "+list.get(i).get(2));
        // }
        Collections.sort(list, new Comparator<ArrayList<Integer>>() {
            @Override
            public int compare(ArrayList<Integer> one, ArrayList<Integer> two) {
                return one.get(1)-two.get(1);
            }
        });
        // for(int i = 0; i<n; i++){
        //     System.out.println(list.get(i).get(0)+" "+list.get(i).get(1)+" "+list.get(i).get(2));
        // }
        int dp[] = new int[n];
        dp[0] = list.get(0).get(2);
        for(int i = 1; i<n; i++){
            dp[i] = list.get(i).get(2);
	    int j = i-1;
            while(j>=0 && list.get(j).get(1)>list.get(i).get(0)){
                j--;
            }
            for(int k = 0; k<=j; k++){
                dp[i] = Math.max(dp[i], dp[k]+list.get(i).get(2));
            }
            //for(int j = 0; j<i; j++){
            //    if(list.get(i).get(0)>=list.get(j).get(1)){
            //        dp[i] = Math.max(dp[i], dp[j]+list.get(i).get(2));
            //    }
            //}
        }
        int max = 0;
        for(int i = 0; i<n; i++){
            max = Math.max(max, dp[i]);
        }
        return max;
    }
}