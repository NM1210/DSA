BOTTOM-UP:-

public class Solution {
    public static int coinGameWinner(int n, int a, int b) {
        int dp[][] = new int[2][n+1];
        int c1 = a;
        int c2 = b;
        a = c1<c2?c1:c2;
        b = c2>c1?c2:c1;
        dp[0][0] = -1;
        dp[1][0] = 1;
//         System.out.println(a+" "+b);
        for(int i = 1; i<n+1; i++){
            if(i-a>=0 && i-b>=0){
                dp[0][i] = Math.max(dp[1][i-1], Math.max(dp[1][i-a], dp[1][i-b]));
            	dp[1][i] = Math.min(dp[0][i-1], Math.min(dp[0][i-a], dp[0][i-b]));
            }
            else if(i-a>=0 && i-b<0){
                dp[0][i] = Math.max(dp[1][i-1], dp[1][i-a]);
            	dp[1][i] = Math.min(dp[0][i-1], dp[0][i-a]);
            }
            else {
                dp[0][i] = dp[1][i-1];
            	dp[1][i] = dp[0][i-1];
            }
        }
        return dp[0][n]>=0?1:0;
    }
}
_____________________________________________________________________________________________________________________________

MEMOIZATION:-

public class Solution {
    static int dp[][];
    static int game(int n, int a, int b, boolean p){
//         if(n<=0){
            if(n==0){
                if(!p) return dp[1][n] = 1;
                else return dp[0][n] = -1;
            }
//             return 0;
//         }
        if(dp[p?1:0][n]!=-1) return dp[p?1:0][n];
        if(p){
            if(n-1>=0 && n-a>=0 && n-b>=0)
            	return dp[p?1:0][n]=Math.max(game(n-1, a, b, !p), Math.max(game(n-a, a, b, !p), game(n-b, a, b, !p)));
            else if(n-1>=0 && n-a>=0 && n-b<1)
                return dp[p?1:0][n]=Math.max(game(n-1, a, b, !p), game(n-a, a, b, !p));
            else
                return dp[p?1:0][n]=game(n-1, a, b, !p);
        }
        else{
            if(n-1>=0 && n-a>=0 && n-b>=0)
            	return dp[p?1:0][n]=Math.min(game(n-1, a, b, !p), Math.min(game(n-a, a, b, !p), game(n-b, a, b, !p)));
            else if(n-1>=0 && n-a>=0 && n-b<1)
                return dp[p?1:0][n]=Math.min(game(n-1, a, b, !p), game(n-a, a, b, !p));
            else 
                return dp[p?1:0][n]=game(n-1, a, b, !p);
        }
    }
    public static int coinGameWinner(int n, int a, int b) {
        dp = new int[2][n+1];
        for(int row[]: dp){
            Arrays.fill(row, -1);
        }
        int ans = game(n, a<b?a:b, b>a?b:a, true);
//         System.out.println(n+" "+ans);
        if(ans>=0) return 1;
//         else if (ans<0) return 0;
        else return 0;
    }
}
___________________________________________________________________________________________________________________________________

RECURRSION:-

public class Solution {
    static int game(int n, int a, int b, boolean p){
//         if(n<=0){
            if(n==0){
                if(!p) return 1;
                else return -1;
            }
//             return 0;
//         }
        if(p){
            if(n-1>=0 && n-a>=0 && n-b>=0)
            	return Math.max(game(n-1, a, b, !p), Math.max(game(n-a, a, b, !p), game(n-b, a, b, !p)));
            else if(n-1>=0 && n-a>=0 && n-b<1)
                return Math.max(game(n-1, a, b, !p), game(n-a, a, b, !p));
            else
                return game(n-1, a, b, !p);
        }
        else{
            if(n-1>=0 && n-a>=0 && n-b>=0)
            	return Math.min(game(n-1, a, b, !p), Math.min(game(n-a, a, b, !p), game(n-b, a, b, !p)));
            else if(n-1>=0 && n-a>=0 && n-b<1)
                return Math.min(game(n-1, a, b, !p), game(n-a, a, b, !p));
            else 
                return game(n-1, a, b, !p);
        }
    }
    public static int coinGameWinner(int n, int a, int b) {
        int ans = game(n, a<b?a:b, b>a?b:a, true);
//         System.out.println(n+" "+ans);
        if(ans>=0) return 1;
//         else if (ans<0) return 0;
        else return 0;
    }
}