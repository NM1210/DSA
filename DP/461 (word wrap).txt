MEMOIZATION:-

class Solution
{
    int dp[][];
    public int wrap(int[] a, int n, int i, int k){
        if(dp[i][k]!=-1) return dp[i][k];
        if(i==a.length-1) return dp[i][k] = 0;
        int cost = 0;
        if(a[i+1]<=k-a[i]-1){
            cost += Math.min(wrap(a, n, i+1, k-a[i]-1), 
                         wrap(a, n, i+1, n) + Math.pow(k-a[i], 2));
        }
        else{
            cost += wrap(a, n, i+1, n) + Math.pow(k-a[i], 2);
        }
        return dp[i][k] = cost;
    }
    public int solveWordWrap (int[] nums, int k)
    {
        dp = new int[nums.length][k+1];
        for(int[] row: dp){
            Arrays.fill(row, -1);
        }
        return wrap(nums, k, 0, k);
    }
}
___________________________________________________________________________
RECURRSION (POLISHED):-

class Solution
{
    public int wrap(int[] a, int n, int i, int k){
        if(i==a.length-1) return 0;
        int cost = 0;
        if(a[i+1]<=k-a[i]-1){
            cost += Math.min(wrap(a, n, i+1, k-a[i]-1), 
                         wrap(a, n, i+1, n) + Math.pow(k-a[i], 2));
        }
        else{
            cost += wrap(a, n, i+1, n) + Math.pow(k-a[i], 2);
        }
        return cost;
    }
    public int solveWordWrap (int[] nums, int k)
    {
        return wrap(nums, k, 0, k);
    }
}

______________________________________________________________________________
RECURRSION:-

class Solution
{
    public int wrap(int[] a, int n, int i, int k){
        if(i==a.length) return 0;
        if(k<a[i]) return Integer.MAX_VALUE;
        int cost = 0;
        cost += Math.min(wrap(a, n, i+1, k-a[i]-1), 
                         wrap(a, n, i+1, n) + Math.pow(k-a[i], 2));
        return cost;
    }
    public int solveWordWrap (int[] nums, int k)
    {
        return wrap(nums, k, 0, k);
    }
}