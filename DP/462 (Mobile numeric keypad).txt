MEMOIZATION:-

class Solution
{
    HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
    long dp[][];
    public long count(int k, int n){
        if(dp[k][n]!=-1) return dp[k][n];
        if(n==0) return dp[k][n]=1;
        long sum = 0;
        for(int i = 0; i<map.get(k).size(); i++){
            sum += count(map.get(k).get(i), n-1);
        }
        return dp[k][n] = sum;
    }
	public long getCount(int n)
	{
	    dp = new long[10][n+1];
	    for(long row[]: dp){
	        Arrays.fill(row, -1);
	    }
		int a[][] = new int[4][3];
		int label = 1;
		for(int i = 0; i<3; i++){
		    for(int j = 0; j<3; j++){
		        a[i][j] = label++;
		    }
		}
		a[3][0] = a[3][2] = -1;
		
// 		for(int i = 0; i<4; i++){
// 		    for(int j = 0; j<3; j++){
// 		        System.out.print(key_pad[i][j]+" ");
// 		    }
// 		    System.out.println();
// 		}

		for(int i = 0; i<4; i++){
		    for(int j = 0; j<3; j++){
		        if(a[i][j]!=-1){
		            ArrayList<Integer> list = new ArrayList<>();
		            list.add(a[i][j]);
		            if(i+1<4 && a[i+1][j]!=-1) list.add(a[i+1][j]);
		            if(i-1>=0) list.add(a[i-1][j]);
		            if(j+1<3 && a[i][j+1]!=-1) list.add(a[i][j+1]);
		            if(j-1>=0 && a[i][j-1]!=-1) list.add(a[i][j-1]);
		            map.put(a[i][j], list);
		        }
		    }
		}
		
		long sum = 0;
		for(int i = 0; i<10; i++){
		    sum += count(i, n-1);
		}
		return sum;
		
// 		for(Integer key: map.keySet()){
// 		    System.out.print(key+"->");
// 		    for(Integer value: map.get(key)){
// 		        System.out.print(value+" ");
// 		    }
// 		    System.out.println();
// 		}

// 		return 0;
	}
}
_______________________________________________________________________________________________
RECURSSION:-

class Solution
{
    HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
    public long count(int k, int n){
        if(n==0) return 1;
        long sum = 0;
        for(int i = 0; i<map.get(k).size(); i++){
            sum += count(map.get(k).get(i), n-1);
        }
        return sum;
    }
	public long getCount(int n)
	{
		int a[][] = new int[4][3];
		int label = 1;
		for(int i = 0; i<3; i++){
		    for(int j = 0; j<3; j++){
		        a[i][j] = label++;
		    }
		}
		a[3][0] = a[3][2] = -1;
		
// 		for(int i = 0; i<4; i++){
// 		    for(int j = 0; j<3; j++){
// 		        System.out.print(key_pad[i][j]+" ");
// 		    }
// 		    System.out.println();
// 		}

		for(int i = 0; i<4; i++){
		    for(int j = 0; j<3; j++){
		        if(a[i][j]!=-1){
		            ArrayList<Integer> list = new ArrayList<>();
		            list.add(a[i][j]);
		            if(i+1<4 && a[i+1][j]!=-1) list.add(a[i+1][j]);
		            if(i-1>=0) list.add(a[i-1][j]);
		            if(j+1<3 && a[i][j+1]!=-1) list.add(a[i][j+1]);
		            if(j-1>=0 && a[i][j-1]!=-1) list.add(a[i][j-1]);
		            map.put(a[i][j], list);
		        }
		    }
		}
		
		long sum = 0;
		for(int i = 0; i<10; i++){
		    sum += count(i, n-1);
		}
		return sum;
		
// 		for(Integer key: map.keySet()){
// 		    System.out.print(key+"->");
// 		    for(Integer value: map.get(key)){
// 		        System.out.print(value+" ");
// 		    }
// 		    System.out.println();
// 		}

// 		return 0;
	}
}