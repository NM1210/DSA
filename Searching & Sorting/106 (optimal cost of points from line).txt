import java.io.*;
import java.util.*;

class Point{
    int x, y;
    Point(int x, int y){
        this.x = x;
        this.y = y;
    }
}
class Line{
    int a, b, c;
    Line(int a, int b, int c){
        this.a = a;
        this.b = b;
        this.c = c;
    }
}
class GFG {
    static double calculate(double x, double y, Point p){
        return Math.sqrt(Math.pow(p.x-x, 2) + Math.pow(p.y-y, 2));
    }
    static double distance(Point p[], int n, Line l, double x){
        double y = -1*(l.a*x+l.c)/l.b;
        double sum = 0;
        for(int i = 0; i<n; i++){
            sum += calculate(x, y, p[i]);
        }
        return sum;
    }
    static double optimalCost(Point p[], int n, Line l){
        double low = -1e6;
        double high = 1e6;
        while((high-low)>(int)(1e-6+1)){
            double mid1 = low + (high-low)/3;
            double mid2 = high - (high-low)/3;
            double dist1 = distance(p, n, l, mid1);
            double dist2 = distance(p, n, l, mid2);
            if(dist1>dist2){
                high = mid2;
            }
            else{
                low = mid1;
            }
        }
        return distance(p, n, l, (low+high)/2);
    }
    static double cost(int points[][], int n, Line l){
        Point p[] = new Point[n];
        for(int i = 0; i<n; i++){
            p[i] = new Point(points[i][0], points[i][1]);
        }
        return optimalCost(p, n, l);
    }
	public static void main (String[] args) {
		int points[][] = { { -3, -2 },
                           { -1, 0 },
                           { -1, 2 },
                           { 1, 2 },
                           { 3, 4 } };
        Line l = new Line(1, -1, 3);
        System.out.println(cost(points, points.length, l));
	}
}