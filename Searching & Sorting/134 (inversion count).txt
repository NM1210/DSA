class Solution
{
    static long count;
    static void merge(long a[], int low, int mid, int high){
        int i = low, k = 0, j = mid+1;
        long temp[] = new long[high-low+1];
        while(i<=mid && j<=high){
            if(a[i]>a[j]){
                temp[k++] = a[j++];
                count += mid-i+1;
            }
            else{
                temp[k++] = a[i++];
            }
        }
        while(i<=mid){
            temp[k++] = a[i++];
        }
        while(j<=high){
            temp[k++] = a[j++];
        }
        k = 0;
        for(int l = low; l<=high; l++){
            a[l] = temp[k++];
        }
    }
    static void sort(long a[], int start, int end){
        // if(start>=end) return;
        if(start<end){
            int mid = (end+start)/2;
            sort(a, start, mid);
            sort(a, mid+1, end);
            merge(a, start, mid, end);
        }
    }
    static long inversionCount(long a[], long n)
    {
        count = 0;
        sort(a, 0, (int)n-1);
        return count;
    }
}