BOTTOM-UP:-
//{SPACE->O(1)}

class Solution{
    // Function to return maximum of sum without adjacent elements
    public int FindMaxSum(int a[], int n){
        if(n==0) return 0;
        int var1 = a[0];
        if(n==1) return var1;
        int var2 = Math.max(a[0],a[1]);
        if(n==2) return var2;
        int max_val = 0;
        for(int i = 2; i<n; i++){
            max_val = Math.max(a[i]+var1, var2);
            var1 = var2;
            var2 = max_val;
        }
        return max_val;
    }
}
_____________________________________________________________________________
BOTTOM-UP:-
//{SPACE->O(N)}

class Solution
{
    public int FindMaxSum(int a[], int n)
    {
        if(n==0) return 0;
        if(n==1) return a[0];
        if(n==2) return Math.max(a[0], a[1]);
        int dp[] = new int[n];
        dp[0] = a[0];
        dp[1] = Math.max(a[0], a[1]);
        for(int i = 2; i<n; i++){
            dp[i] = Math.max(a[i]+dp[i-2], dp[i-1]);
        }
        return dp[n-1];
    }
}
_____________________________________________________________________________
MEMOIZATION:-

class Solution
{
    static int dp[];
    public static int maxLoot(int a[], int pos){
        if(pos<0) return 0;
        if(pos==0) return dp[pos] = a[0];
        if(dp[pos]!=-1) return dp[pos];
        int taken = maxLoot(a, pos-2)+a[pos];
        int not = maxLoot(a, pos-1);
        return dp[pos] = Math.max(taken, not);
    }
    public static int FindMaxSum(int a[], int n)
    {
        dp = new int[n];
        Arrays.fill(dp, -1);
        return maxLoot(a, n-1);
    }
}
_________________________________________________________________________________
RECURSION:-

class Solution
{
    public int maxLoot(int a[], int pos){
        if(pos<0) return 0;
        return Math.max(maxLoot(a, pos-1), maxLoot(a, pos-2)+a[pos]);
    }
    public int FindMaxSum(int a[], int n)
    {
        Solution obj = new Solution();
        return obj.maxLoot(a, n-1);
    }
}