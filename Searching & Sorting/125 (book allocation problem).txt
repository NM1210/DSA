O(NLogN):-
//USING BINARY SEARCH

class Solution 
{
    public static int findPages(int[]a,int n,int m)
    {
        int res = -1;
        int min = a[0];
        int max = 0;
        for(int i = 0; i<n; i++){
            if(a[i]<min) min = a[i];
            max+=a[i];
        }
        // System.out.println(min+" "+max);
        int low = min;
        int high = max;
        while(low<=high){
            int mid = (low+high)/2;
            // System.out.println("mid = "+mid);
            int sum = 0;
            int count = 1;
            for(int i = 0; i<n; i++){
                if(a[i]>mid){
                    count = m+1;
                    break;
                }
                else if(sum+a[i]>mid){
                    // System.out.println(sum+" "+count);
                    sum = 0;
                    count++;
                }
                sum+=a[i];
            }
            if(count>m){
                low = mid+1;
            }
            else{
                res = mid;
                high = mid-1;
            }
            // System.out.println(res);
        }
        return res;
    }
};
___________________________________________________________________
RECURSION:-
O(2^N)

class Solution {
    public static int findPages(int[]a,int n,int m)
    {
        Arrays.sort(a);
        int lb = 0, ub = 0;
        int ans = -1;
        for(int i = 0; i<n; i++){
            ub = ub + a[i];
        }
        // System.out.println(ub);
        while(lb<ub){
            int sum = 0;
            int mid = (lb+ub)/2;
            // System.out.println(mid);
            int count = 1;
            for(int i = 0; i<n; i++){
                if(sum+a[i]<=mid){
                    sum = sum+a[i];
                }
                else if(a[i]>mid){
                    break;
                }
                else{
                    count++;
                    sum = a[i];
                }
            }
            if(count>m){
                lb=mid+1;
            }
            else if(count == m){
                ans = mid;
                ub = mid - 1;
            }
            else{
                ub = mid - 1;
            }
        }
        return ans;
    }
};
_________________________________________________________________

class Solution {
    public static int findPages(int[]a,int n,int m)
    {
        Arrays.sort(a);
        int lb = 0, ub = 0;
        int ans = -1;
        for(int i = 0; i<n; i++){
            ub = ub + a[i];
        }
        // System.out.println(ub);
        while(lb<=ub){
            int sum = 0;
            int mid = (lb+ub)/2;
            // System.out.println(mid);
            int count = 1;
            for(int i = 0; i<n; i++){
                if(a[i]>mid){
                    count = m + 1;
                    break;
                }
                if(sum+a[i]<=mid){
                    sum = sum+a[i];
                }
                else{
                    count++;
                    sum = a[i];
                }
            }
            if(count == m){
                ans = mid;
                ub = mid - 1;
            }
            else if(count>m){
                lb = mid + 1;
            }
            else if(count<m){
                ub = mid - 1;
            }
        }
        return ans;
    }
};
________________________________________________________________

class Solution {
    public static int findPages(int[]a,int n,int m)
    {
        // Arrays.sort(a);
        int lb = 0, ub = 0;
        int ans = -1;
        for(int i = 0; i<n; i++){
            ub = ub + a[i];
        }
        // System.out.println(ub);
        while(lb<=ub){
            int sum = 0;
            int mid = (lb+ub)/2;
            // System.out.println(mid);
            int count = 1;
            for(int i = 0; i<n; i++){
                if(a[i]>mid){
                    count = m + 1;
                    break;
                }
                if(sum+a[i]<=mid){
                    sum = sum+a[i];
                }
                else{
                    count++;
                    sum = a[i];
                }
            }
            if(count <= m){
                ans = mid;
                ub = mid - 1;
            }
            else if(count>m){
                lb = mid + 1;
            }
            // else if(count<m){
            //     ub = mid - 1;
            // }
        }
        return ans;
    }
};