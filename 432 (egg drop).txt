BOTTOM-UP:-

class Solution 
{
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    static int eggDrop(int n, int k) 
	{
	    int dp[][] = new int[n+1][k+1];
	    for(int i = 0; i<n+1; i++){
	        for(int j = 0; j<k+1; j++){
	            if(i == 0 || j == 0){
	                dp[i][j] = 0;
	            }
	            else if(i == 1){
	                dp[i][j] = j;
	            }
	            else if(j == 1){
	                dp[i][j] = 1;
	            }
	        }
	    }
	   // for(int i = 0; i<n+1; i++){
	   //     for(int j = 0; j<k+1; j++){
	   //         System.out.print(dp[i][j]+" ");
	   //     }
	   //     System.out.println();
	   // }
	   for(int i = 2; i<n+1; i++){
	        for(int j = 2; j<k+1; j++){
	            int min = Integer.MAX_VALUE;
	            for(int itr = 1; itr<=j; itr++){
	                int temp = Math.max(dp[i][j-itr], dp[i-1][itr-1]);
	                if(temp<min){
	                    min = temp;
	                }
	            }
	            dp[i][j] = min + 1;
	        }
	    }
	   // for(int i = 0; i<n+1; i++){
	   //     for(int j = 0; j<k+1; j++){
	   //         System.out.print(dp[i][j]+" ");
	   //     }
	   //     System.out.println();
	   // }
	    return dp[n][k];
	}
}
____________________________________________________________________________________

RECURRSION:-

class Solution 
{
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    static int eggDrop(int n, int k) 
	{
	    if(n<=1){
	        if(n==0) return 0;
	        return k;
	    }
	    if(k<=1){
	        if(k==0) return 0;
	        return 1;
	    }
	    int min = Integer.MAX_VALUE;
	    for(int i = 1; i<k; i++){
	        int temp = Math.max(eggDrop(n, k-i), eggDrop(n-1, i-1))+1;
	        if(temp<min){
	            min = temp;
	        }
	    }
	    return min; 
	}
}