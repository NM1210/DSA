ANOTHER APPROACH:-

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> list = new ArrayList<>();
        int m = matrix.length;
        int n = matrix[0].length;
        int l = 0;
        int r = n-1;
        int t = 0;
        int b = m-1;
        while(l<=r && t<=b){
            int j = l;
            while(j<=r){
                list.add(matrix[t][j]);
                j++;
            }
            if(list.size()==m*n) break;		//ALSO HACKING
            t+=1;
            int i = t;
            while(i<=b){
                list.add(matrix[i][r]);
                i++;
            }
            if(list.size()==m*n) break;		//HACKING
            r-=1;
            j = r;
            while(j>=l){
                list.add(matrix[b][j]);
                j--;
            }
            if(list.size()==m*n) break;		//YET AGAIN
            b-=1;
            i = b;
            while(i>=t){
                list.add(matrix[i][l]);
                i--;
            }
            if(list.size()==m*n) break;		//THIS TOO
            l+=1;
        }
        return list;
    }
}
_____________________________________________________________________________________
ORIGINAL APPROACH:-

class Solution
{
    //Function to return a list of integers denoting spiral traversal of matrix.
    static ArrayList<Integer> spirallyTraverse(int a[][], int m, int n)
    {
        ArrayList<Integer> list = new ArrayList<>();
        int l = 0;
        int r = n-1;
        int t = 0;
        int b = m-1;
        while(l<=r && t<=b){
            for(int j = l; j<=r; j++){
                list.add(a[t][j]);
            }
            for(int i = t+1; i<=b; i++){
                list.add(a[i][r]);
            }
            t+=1;
            for(int j = r-1; j>=l; j--){
                list.add(a[b][j]);
            }
            r-=1;
            for(int i = b-1; i>=t; i--){
                list.add(a[i][l]);
            }
            b-=1;
            l+=1;
        }
        ArrayList<Integer> ans = new ArrayList<>();		//HACKING!!
        for(int i = 0; i<m*n; i++){
            ans.add(list.get(i));
        }
        return ans;
    }
}