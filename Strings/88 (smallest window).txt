O(N):-

class Solution {
    public String findSubString(String str) {
        int n = str.length();
        HashSet<Character> set = new HashSet<>();
        String output = "";
        for(int i = 0; i<n; i++){
            set.add(str.charAt(i));
            // output+=str.charAt(i);
        }
        int window = n;
        int beg = 0;
        int distinct = set.size();
        int vis[] = new int[256];
        int start = 0;
        int count = 0;
        for(int end = 0; end<n; end++){
            if(vis[(int)str.charAt(end)]==0) count++;
            vis[(int)str.charAt(end)]++;
            if(count==distinct){
                while(vis[(int)str.charAt(start)]>1){
                    vis[(int)str.charAt(start)]--;
                    start++;
                }
                if(end+1-start<window){
                    beg = start;
                    window = end+1-start;
                }
            }
        }
        output = "";
        for(int i = beg; i<beg+window; i++){
            output += str.charAt(i);
        }
        return output;
    }
}
____________________________________________________________________________________
O(N^2 * No. of distict elements):-
//TLE

class Solution {
    public String findSubString(String str) {
        int n = str.length();
        HashSet<Character> set = new HashSet<>();
        String output = "";
        for(int i = 0; i<n; i++){
            set.add(str.charAt(i));
            output+=str.charAt(i);
        }
        int window = n;
        for(int i = 0; i<n; i++){
            String temp = "";
            for(int j = i; j<n; j++){
                temp+=str.charAt(j);
                int f = 1;
                for(Character ch: set){
                    if(!str.substring(i, j+1).contains(String.valueOf(ch))){
                        f = 0;
                        break;
                    }
                }
                if(f==1 && j+1-i<window){
                    output = temp;
                    window = j+1-i;
                }
            }
        }
        return output;
    }
}
_________________________________________________________________________
public class Q10 {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        String str = input.nextLine();
        String s = "";
        int size = str.length();
        for (int i = 0; i < str.length(); i++) {
            if (!instring(s,str.charAt(i))){
                s = s.concat(String.valueOf(str.charAt(i)));
            }
        }
        String ans = "";
        for (int i = 0; i <= str.length() - 1; i++){
            for (int j = str.length(); j >= i; j--){
                if (check(str.substring(i,j),s)){
                    if (str.substring(i,j).length() < size){
                        size = str.substring(i,j).length();
                        ans = str.substring(i,j);
                    }
                }
            }
        }
        System.out.println("ans = " + ans);
    }
    static boolean instring(String str, char ch){
        if (str.isEmpty()) return false;
        int f = 0;
        for (int i = 0; i<str.length(); i++){
            if (str.charAt(i) == ch){
                f=1;
            }
        }
        if (f==1) return true;
        else return false;
    }
    static boolean check(String str, String st){
        int f = 0;
        for (int i = 0; i < st.length(); i++){
            for (int j = 0; j < str.length(); j++){
                if (Character.compare(str.charAt(j), st.charAt(i)) == 0){
                    f++;
                    j = str.length() - 1;
                }
            }
        }
        if (f == st.length()) return true;
        else return false;
    }
}
