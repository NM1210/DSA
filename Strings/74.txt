class Solution {
    int lps(String s) {
        int n = s.length();
        int len = 0;
        int[] a = new int[n];
        a[0] = 0;
        int i = 1;
        while(i<n){
            if(s.charAt(len)==s.charAt(i)){
                len++;
                a[i] = len;
                i++;
            }
            else if(s.charAt(len)!=s.charAt(i) && len>0){
                len = a[len-1];
            }
            else{
                a[i] = 0;
                i++;
            }
        }
        return len;
    }
}
________________________________________________________________

class Solution {
    public int strStr(String haystack, String needle) {
        if(needle.isEmpty()) return 0;
        else if(!needle.isEmpty() && haystack.isEmpty()) return -1;
        int m = needle.length();
        int n = haystack.length();
        if(m>n) return -1;
        int ans = -1;
        int lps[] = new int[m];
        int len = 0;
        lps[0] = 0;
        int k = 1;
        while(k<m){
            if(needle.charAt(len)==needle.charAt(k)){
                len++;
                lps[k] = len;
                k++;
            }
            else if(needle.charAt(len)!=needle.charAt(k) && len>0){
                len = lps[len-1];
            }
            else{
                lps[k] = 0;
                k++;
            }
        }
        // for(int i = 0; i<m; i++){
        //     System.out.print(lps[i] + " ");
        // }
        int i = 0;
        int j = 0;
        while(i<n){
            if(haystack.charAt(i)==needle.charAt(j)){
                j++;
                i++;
                if(j==m){
                    ans = i-m;
                    // System.out.println(ans);
                    break;
                }
            }
            else if(haystack.charAt(i)!=needle.charAt(j) && j>0){
                j = lps[j-1];
            }
            else{
                i++;
            }
        }
        return ans;
    }
}