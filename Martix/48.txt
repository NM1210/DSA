class Solution {
    void youngify(int[][] M, int indexi, int indexj){
        int down = (indexi+1<M.length)?M[indexi+1][indexj]:Integer.MAX_VALUE;
        int right = (indexj+1<M.length)?M[indexi][indexj+1]:Integer.MAX_VALUE;
        if(down<right){
            int temp = M[indexi][indexj];
            M[indexi][indexj] = down;
            M[indexi+1][indexj] = temp;
            youngify(M, indexi+1, indexj);
        }
        if(down>right){
            int temp = M[indexi][indexj];
            M[indexi][indexj] = right;
            M[indexi][indexj+1] = temp;
            youngify(M, indexi, indexj+1);
        }
    }
    int extractMin(int[][] mat){
        int res = mat[0][0];
        mat[0][0] = Integer.MAX_VALUE;
        youngify(mat,0,0);
        return res;
    }
    int[][] sortedMatrix(int N, int Mat[][]) {
        int[][] ans = new int[N][N];
        for(int i = 0; i<N; i++){
            for(int j = 0; j<N; j++){
                ans[i][j] = extractMin(Mat);
            }
        }
        return ans;
    }
};
____________________________________________________________________________

class Solution {
    int[][] sortedMatrix(int N, int Mat[][]) {
        PriorityQueue<Integer> Q = new PriorityQueue<>();
        int[][] ans = new int[N][N];
        for(int i = 0; i<N; i++){
            for(int j = 0; j<N; j++){
                Q.add(Mat[i][j]);
            }
        }
        for(int i = 0; i<N; i++){
            for(int j = 0; j<N; j++){
                ans[i][j] = Q.poll();
            }
        }
        return ans;
    }
};
_____________________________________________________________________________

class Solution {
    int[][] sortedMatrix(int N, int Mat[][]) {
        PriorityQueue<Integer> Q = new PriorityQueue<>();
        int[] t = new int[N*N];
        int c = 0;
        for(int i = 0; i<N; i++){
            for(int j = 0; j<N; j++){
                t[c++] = Mat[i][j];
            }
        }
        Arrays.sort(t);
        c = 0;
        for(int i = 0; i<N; i++){
            for(int j = 0; j<N; j++){
                Mat[i][j] = t[c++];
            }
        }
        return Mat;
    }
};