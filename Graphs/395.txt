/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;

class Pair implements Comparator<Pair>{
    private int node;
    private int degree;

    public static Pair createPair(int node, int degree) {
        return new Pair(node, degree);
    }

    public Pair(int node, int degree) {
        this.node = node;
        this.degree = degree;
    }
    
    Pair() {}

    public int get_node() {
        return node;
    }

    public int get_degree() {
        return degree;
    }
    
    public void set_node(int node){
        this.node = node;
    }
    
    public void set_degree(int degree){
        this.degree = degree;
    }

	@Override
	public int compare(Pair o1, Pair o2) {
		if(o1.degree<o2.degree) return 1;
		if(o1.degree>o2.degree) return -1;
		return 0;
	}
}
class GFG {
    HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
    void addEdge(int u, int v){
        if(!map.containsKey(u)){
            ArrayList<Integer> list = new ArrayList<Integer>();
            list.add(v);
            map.put(u, list);
        }
        else{
            ArrayList<Integer> list = map.get(u);
            list.add(v);
            map.put(u, list);
        }
        if(!map.containsKey(v)){
            ArrayList<Integer> list = new ArrayList<Integer>();
            list.add(u);
            map.put(v, list);
        }
        else{
            ArrayList<Integer> list = map.get(v);
            list.add(u);
            map.put(v, list);
        }
        
    }
    void printGraph(){
        for(Integer node: map.keySet()){
            System.out.print(node+"->");
            for(int i = 0; i<map.get(node).size(); i++){
                System.out.print(map.get(node).get(i)+"->");
            }
            System.out.println();
        }
    }
	public static void main (String[] args) {
		GFG graph = new GFG();
		graph.addEdge(0, 1);
		graph.addEdge(1, 2);
		graph.addEdge(1, 3);
		graph.addEdge(2, 4);
		graph.addEdge(2, 5);
		graph.addEdge(3, 4);
		graph.printGraph();
		ArrayList<Integer> ans = new ArrayList<>();
		PriorityQueue<Pair> q = new PriorityQueue<Pair>(new Pair());
		for(int i = 0; i<graph.map.size(); i++){
		    Pair p = new Pair(i, graph.map.get(i).size());
		    q.add(p);
		}
// 		while(!q.isEmpty()){
// 		    Pair p = q.poll();
// 		    System.out.print(p.get_node()+""+p.get_degree()+", ");
// 		}
		while(!q.isEmpty()){
		    Pair curr = q.poll();
		    ans.add(curr.get_node());
		    for(int i = 0; i<graph.map.get(curr.get_node()).size(); i++){
		        ArrayList<Pair> toRemove = new ArrayList<>();
		        ArrayList<Pair> toAdd = new ArrayList<>();
		        for(Pair p: q){
		            if(p.get_node()==graph.map.get(curr.get_node()).get(i)){
		                Pair modified = p;
		                toRemove.add(modified);
		                if(modified.get_degree()-1>0){
		                    modified.set_degree(modified.get_degree()-1);
		                    toAdd.add(modified);
		                }
		                
		              //  q.remove(p);                //ConcurrentModificationException
		              //  if(p.get_degree()-1>0){
		              //      p.set_degree(p.get_degree()-1);
		              //      q.add(p);
		              //  }
		            }
		        }
		        for(Pair p: toRemove){
		            q.remove(p);
		        }
		        for(Pair p: toAdd){
		            q.add(p);
		        }
		    }
		}
		for(int i = 0; i<ans.size(); i++){
		    System.out.print(ans.get(i)+" ");
		}
	}
}

______________________________________________________________________________________________________


/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;

class Pair implements Comparator<Pair>{
    private int node;
    private int degree;

    public static Pair createPair(int node, int degree) {
        return new Pair(node, degree);
    }

    public Pair(int node, int degree) {
        this.node = node;
        this.degree = degree;
    }
    
    Pair() {}

    public int get_node() {
        return node;
    }

    public int get_degree() {
        return degree;
    }

	@Override
	public int compare(Pair o1, Pair o2) {
		if(o1.degree<o2.degree) return 1;
		if(o1.degree>o2.degree) return -1;
		return 0;
	}
}
class GFG {
    HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
    void addEdge(int u, int v){
        if(!map.containsKey(u)){
            ArrayList<Integer> list = new ArrayList<Integer>();
            list.add(v);
            map.put(u, list);
        }
        else{
            ArrayList<Integer> list = map.get(u);
            list.add(v);
            map.put(u, list);
        }
        if(!map.containsKey(v)){
            ArrayList<Integer> list = new ArrayList<Integer>();
            list.add(u);
            map.put(v, list);
        }
        else{
            ArrayList<Integer> list = map.get(v);
            list.add(u);
            map.put(v, list);
        }
        
    }
    void printGraph(){
        for(Integer node: map.keySet()){
            System.out.print(node+"->");
            for(int i = 0; i<map.get(node).size(); i++){
                System.out.print(map.get(node).get(i)+"->");
            }
            System.out.println();
        }
    }
	public static void main (String[] args) {
		GFG graph = new GFG();
		graph.addEdge(0, 1);
		graph.addEdge(1, 2);
		graph.addEdge(1, 3);
		graph.addEdge(2, 4);
		graph.addEdge(2, 5);
		graph.addEdge(3, 4);
		graph.printGraph();
		PriorityQueue<Pair> q = new PriorityQueue<Pair>(new Pair());
		for(int i = 0; i<graph.map.size(); i++){
		    Pair p = new Pair(i, graph.map.get(i).size());
		    q.add(p);
		}
		while(!q.isEmpty()){
		    Pair p = q.poll();
		    System.out.print(p.get_node()+""+p.get_degree()+", ");
		}
	}
}

____________________________________________________________________________________________

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;

class GFG {
    public static HashMap<Integer, Integer> sortByValue(HashMap<Integer, Integer> hm)
    {
        // Create a list from elements of HashMap
        List<Map.Entry<Integer, Integer> > list =
               new LinkedList<Map.Entry<Integer, Integer> >(hm.entrySet());
 
        // Sort the list
        Collections.sort(list, new Comparator<Map.Entry<Integer, Integer> >() {
            public int compare(Map.Entry<Integer, Integer> o2,
                               Map.Entry<Integer, Integer> o1)
            {
                return (o1.getValue()).compareTo(o2.getValue());
            }
        });
         
        // put data from sorted list to hashmap
        HashMap<Integer, Integer> temp = new LinkedHashMap<Integer, Integer>();
        for (Map.Entry<Integer, Integer> aa : list) {
            temp.put(aa.getKey(), aa.getValue());
        }
        return temp;
    }
    HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
    void addEdge(int u, int v){
        if(!map.containsKey(u)){
            ArrayList<Integer> list = new ArrayList<Integer>();
            list.add(v);
            map.put(u, list);
        }
        else{
            ArrayList<Integer> list = map.get(u);
            list.add(v);
            map.put(u, list);
        }
        if(!map.containsKey(v)){
            ArrayList<Integer> list = new ArrayList<Integer>();
            list.add(u);
            map.put(v, list);
        }
        else{
            ArrayList<Integer> list = map.get(v);
            list.add(u);
            map.put(v, list);
        }
        
    }
    void printGraph(){
        for(Integer node: map.keySet()){
            System.out.print(node+"->");
            for(int i = 0; i<map.get(node).size(); i++){
                System.out.print(map.get(node).get(i)+"->");
            }
            System.out.println();
        }
    }
	public static void main (String[] args) {
		GFG graph = new GFG();
		graph.addEdge(0, 1);
		graph.addEdge(1, 2);
		graph.addEdge(1, 3);
		graph.addEdge(2, 4);
		graph.addEdge(2, 5);
		graph.addEdge(3, 4);
		graph.printGraph();
		
		HashMap<Integer, Integer> pq = new HashMap<>();
		for(int i = 0; i<graph.map.size(); i++){
		    pq.put(i, graph.map.get(i).size());
		}
		for(Map.Entry<Integer, Integer> entry: pq.entrySet()){
		    System.out.print(entry.getKey()+":"+entry.getValue()+" ");
		}
		System.out.println();
		pq = sortByValue(pq);
		for(Map.Entry<Integer, Integer> entry: pq.entrySet()){
		    System.out.print(entry.getKey()+":"+entry.getValue()+" ");
		}
		
	}
}