/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;

class GFG {
	public static void main (String[] args) {
	    int triangles = 0;
		int graph[][] = {{0, 1, 1, 0},
                         {1, 0, 1, 1},
                         {1, 1, 0, 1},
                         {0, 1, 1, 0}
                       };
       int digraph[][] = { {0, 0, 1, 0},
                           {1, 0, 0, 1},
                           {0, 1, 0, 0},
                           {0, 0, 1, 0}
                         };
        for(int i = 0; i<graph.length; i++){
            for(int j = 0; j<graph.length; j++){
                for(int k = 0; k<graph.length; k++){
                    if(graph[i][j]==1&&graph[j][k]==1&&graph[k][i]==1){
                        triangles++;
                    }
                }
            }
        }
        System.out.println(triangles/6);
        triangles = 0;
        for(int i = 0; i<digraph.length; i++){
            for(int j = 0; j<digraph.length; j++){
                for(int k = 0; k<digraph.length; k++){
                    if(digraph[i][j]==1&&digraph[j][k]==1&&digraph[k][i]==1){
                        triangles++;
                    }
                }
            }
        }
        System.out.println(triangles/3);
	}
}
______________________________________________________________________________________

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;

class GFG {
    HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
    Integer triangles;
    void addEdge(int u, int v, int direction){
        if(!map.containsKey(u)){
            ArrayList<Integer> list = new ArrayList<Integer>();
            list.add(v);
            map.put(u, list);
        }
        else{
            ArrayList<Integer> list = map.get(u);
            list.add(v);
            map.put(u, list);
        }
        if(direction == 1){
            addEdge(v, u, 0);
        }
    }
    void printGraph(){
        for(Integer node: map.keySet()){
            System.out.print(node+"->");
            for(int i = 0; i<map.get(node).size(); i++){
                System.out.print(map.get(node).get(i)+"->");
            }
            System.out.println();
        }
    }
    int dfs(int start, int[] vis, int count, int num, int ref){
        if(start==ref && count==3){
            count = 0;
            num++;
        }
        for(int i = 0; i<map.get(start).size(); i++){
            if(vis[map.get(start).get(i)]!=1 && map.get(start).size()>1){
                vis[map.get(start).get(i)] = 1;
                dfs(map.get(start).get(i), vis, count+1, num, ref);
            }
            if(vis[map.get(start).get(i)]!=1){
                dfs(map.get(start).get(i), vis, count+1, num, ref);
            }
        }
        if(num>triangles) triangles = num;
        System.out.print(num+", ");
        return num;
    }
    int countTriangles(int n, int direction){
        int count = 0;
        for(int i = 0; i<n; i++){
            int vis[] = new int[n];
            triangles = Integer.MIN_VALUE;
            dfs(i, vis, 0, 0, i);
            count = count + triangles;
            System.out.println();
        }
        return count;
    }
	public static void main (String[] args) {
		GFG graph = new GFG();
		int direction = 0;
		graph.addEdge(0, 2, direction);
		graph.addEdge(1, 0, direction);
		graph.addEdge(1, 3, direction);
		graph.addEdge(2, 1, direction);
		graph.addEdge(3, 2, direction);
		graph.printGraph();
		int n = graph.map.size();
// 		System.out.println(n);
		System.out.println(graph.countTriangles(n, direction));
		
	}
}

_____________________________________________________________________________________________________

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;

class GFG {
    HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
    Integer triangles;
    void addEdge(int u, int v, int direction){
        if(!map.containsKey(u)){
            ArrayList<Integer> list = new ArrayList<Integer>();
            list.add(v);
            map.put(u, list);
        }
        else{
            ArrayList<Integer> list = map.get(u);
            list.add(v);
            map.put(u, list);
        }
        if(direction == 1){
            addEdge(v, u, 0);
        }
    }
    void printGraph(){
        for(Integer node: map.keySet()){
            System.out.print(node+"->");
            for(int i = 0; i<map.get(node).size(); i++){
                System.out.print(map.get(node).get(i)+"->");
            }
            System.out.println();
        }
    }
    void dfs(int start, int[] vis, int count, int num, int ref){
        if(start==ref && count==3){
            triangles++;
        }
        for(int i = 0; i<map.get(start).size(); i++){
            if(vis[map.get(start).get(i)]!=1){
                vis[map.get(start).get(i)] = 1;
                dfs(map.get(start).get(i), vis, count+1, num, ref);
                vis[map.get(start).get(i)] = 0;
            }
        }
        // if(num>triangles) triangles = num;
    }
    int countTriangles(int n, int direction){
        int count = 0;
        for(int i = 0; i<n; i++){
            triangles = 0;
            int vis[] = new int[n];
            dfs(i, vis, 0, 0, i);
            count = count + triangles;
            // System.out.println();
        }
        if(direction==1) return count/6;
        else return count/3;
    }
	public static void main (String[] args) {
		GFG graph = new GFG();
		int direction = 1;
		graph.addEdge(0, 2, direction);
		graph.addEdge(1, 0, direction);
		graph.addEdge(1, 3, direction);
		graph.addEdge(2, 1, direction);
		graph.addEdge(3, 2, direction);
		graph.printGraph();
		int n = graph.map.size();
// 		System.out.println(n);
		System.out.println(graph.countTriangles(n, direction));
		
	}
}