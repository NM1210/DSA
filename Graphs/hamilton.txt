class Solution 
{ 
    boolean hamilton(int node, int[][] mat, int n, int[] vis, int count){
        if(count == n) return true;
        for(int i = 1; i<=n; i++){
            if(mat[node][i]!=0 && vis[i]==0){
                vis[i] = 1;
                if(hamilton(i, mat, n, vis, count+1)) return true;
                vis[i] = 0;
            }
        }
        return false;
    }
    boolean check(int n, int M, ArrayList<ArrayList<Integer>> Edges) 
    { 
        int vis[] = new int[n+1];
        int mat[][] = new int[n+1][n+1];
        for(int i = 0; i<M; i++){
            mat[Edges.get(i).get(0)][Edges.get(i).get(1)] = 1;
            mat[Edges.get(i).get(1)][Edges.get(i).get(0)] = 1;
        }
        // for(int i = 1; i<n+1; i++){
        //     for(int j = 1; j<n+1; j++){
        //         System.out.print(mat[i][j]+" ");
        //     }
        //     System.out.println();
        // }
        for(int i = 1; i<=n; i++){
            vis[i] = 1;
            if(hamilton(i, mat, n, vis, 1)) return true;
            vis[i] = 0;
        }
        return false;
    }
} 