public class SnakesAndLadders {
	
	int min_steps = Integer.MAX_VALUE;
	
     void move(int start, int n, int[][] board, int[][] lookup, int steps){
    	
        if(start>n*n) return;
        
        if(start==n*n){
            if(steps<min_steps){
                min_steps = steps;
            }
            return;
        }
        
        if(board[lookup[start][0]][lookup[start][1]]!=-1 && board[lookup[start][0]][lookup[start][1]]!=0){
            start = board[lookup[start][0]][lookup[start][1]];
        }
        
        if(board[lookup[start][0]][lookup[start][1]] == 0) return;
        
        if(board[lookup[start][0]][lookup[start][1]]==-1){
            board[lookup[start][0]][lookup[start][1]] = 0;
        }
        
        for(int i = 1; i<=n; i++){
            move(start+i, n, board, lookup, steps+1);
        }
        
        if(board[lookup[start][0]][lookup[start][1]]==0){
            board[lookup[start][0]][lookup[start][1]] = -1;
        }
    }
    
    int snakesAndLadders(int[][] board) {
        int n = board.length;
        int lookup[][] = new int[n*n+1][2];
        boolean flag = false;
        int counter = 1;
        for(int i = n-1; i>=0; i--){
            if(flag){
                for(int j = n-1; j>=0; j--){
                    lookup[counter][0] = i;
                    lookup[counter][1] = j;
                    counter++;
                }
            }
            else{
                for(int j = 0; j<n; j++){
                    lookup[counter][0] = i;
                    lookup[counter][1] = j;
                    counter++;
                }
            }
            flag = !flag;
        }
        // System.out.println(lookup.length);
        // for(int i = 1; i<lookup.length; i++){
        //     System.out.print(lookup[i][0]+","+lookup[i][1]+" ");
        // }
        move(1, n, board, lookup, 0);
        return min_steps;
    }

	public static void main(String[] args) {
		int [][] board = {{-1,-1,-1,-1,-1,-1},
		                  {-1,-1,-1,-1,-1,-1},
		                  {-1,-1,-1,-1,-1,-1},
		                  {-1,35,-1,-1,13,-1},
		                  {-1,-1,-1,-1,-1,-1},
		                  {-1,15,-1,-1,-1,-1}};
		SnakesAndLadders obj = new SnakesAndLadders();
		System.out.println(obj.snakesAndLadders(board));
	}

}

________________________________________________________________________________________

    public int snakesAndLadders(int[][] board) {
        int min_steps = -1;
        int n = board.length;
        int lookup[][] = new int[n*n+1][2];
        boolean flag = false;
        int counter = 1;
        for(int i = n-1; i>=0; i--){
            if(flag){
                for(int j = n-1; j>=0; j--){
                    lookup[counter][0] = i;
                    lookup[counter][1] = j;
                    counter++;
                }
            }
            else{
                for(int j = 0; j<n; j++){
                    lookup[counter][0] = i;
                    lookup[counter][1] = j;
                    counter++;
                }
            }
            flag = !flag;
        }
        int vis[] = new int[n*n+1];
        Arrays.fill(vis, -1);
        Queue<Integer> q = new LinkedList<Integer>();
        vis[1] = 0;
        q.add(1);
        while(!q.isEmpty()){
            int curr = q.poll();
            if(curr==n*n) {
                min_steps = vis[curr];
                // System.out.println(curr+" "+vis[curr]);
            }
            for(int i = 1; i<=6; i++){
                if(curr+i<=n*n && board[lookup[curr+i][0]][lookup[curr+i][1]]==-1 && vis[curr+i]==-1){
                    vis[curr+i] = vis[curr]+1;
                    q.add(curr+i);
                }
                else if(curr+i<=n*n && board[lookup[curr+i][0]][lookup[curr+i][1]]!=-1 && vis[board[lookup[curr+i][0]][lookup[curr+i][1]]]==-1){
                    vis[board[lookup[curr+i][0]][lookup[curr+i][1]]]=vis[curr]+1;
                    q.add(board[lookup[curr+i][0]][lookup[curr+i][1]]);
                }
            }
        }
        // System.out.println(lookup.length);
        // for(int i = 1; i<lookup.length; i++){
        //     System.out.print(lookup[i][0]+","+lookup[i][1]+" ");
        // }
        // move(1, n, board, lookup, 0);
        return min_steps;
    }