/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;

class Pair implements Comparator<Pair>{
    private int node;
    private int amt;

    public static Pair createPair(int node, int amt) {
        return new Pair(node, amt);
    }

    public Pair(int node, int amt) {
        this.node = node;
        this.amt = amt;
    }
    
    Pair() {}

    public int get_node() {
        return node;
    }

    public int get_amt() {
        return amt;
    }
    
    public void set_node(int node){
        this.node = node;
    }
    
    public void set_amt(int amt){
        this.amt = amt;
    }

	@Override
	public int compare(Pair o1, Pair o2) {
		if(o1.amt<o2.amt) return -1;
		if(o1.amt>o2.amt) return 1;
		return 0;
	}
}

class GFG {
//    static Pair last(PriorityQueue<Pair> pq){
//        Pair p = new Pair(0, 0);
//        PriorityQueue<Pair> q = pq;
//        while(!q.isEmpty()){
//            if(q.size()==1) {
//            	p = q.peek();
//            }
//            q.poll();
//        }
//        return p;
//    }
//    static PriorityQueue<Pair> remove_last(PriorityQueue<Pair> pq){
//        PriorityQueue<Pair> q = new PriorityQueue<Pair>(new Pair());
////        if(pq.size()==1) return newpq;
//        while(pq.size()>1){
//            q.add(pq.poll());
//        }
//        pq = q;
//        return pq;
//    }
	public static void main (String[] args) {
		int graph[][] = { {0, 1000, 2000},
                            {0, 0, 5000},
                            {0, 0, 0},};
//		System.out.println(Math.min(5, 5));
        int n = graph.length;
        int res[][] = new int[n][n];
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>(new Pair());
//        System.out.println(pq.isEmpty());
        for(int i = 0; i<n; i++){
            int debit = 0;
            int credit = 0;
            for(int j = 0; j<n; j++){
                debit += graph[i][j];
                credit += graph[j][i];
            }
            int net = credit - debit;
            Pair p = new Pair(i, net);
            pq.add(p);
        }
        // while(!pq.isEmpty()){
        //     Pair p = pq.poll();
        //     System.out.println(p.get_node()+" "+p.get_amt());
        // }
        // Pair last = last(pq);
        // System.out.println(last.get_node()+" "+last.get_amt());
        // pq = remove_last(pq);
        // while(!pq.isEmpty()){
        //     Pair p = pq.poll();
        //     System.out.println(p.get_node()+" "+p.get_amt());
        // }
        while(!pq.isEmpty()){
        	PriorityQueue<Pair> temp = new PriorityQueue<Pair>(new Pair());
        // 	for(Pair p: pq) {
        //     	System.out.print(p.get_node()+":"+p.get_amt()+" ");
        //     }
        // 	System.out.println();
            Pair debitor = pq.poll();
        //     for(Pair p: pq) {
        //     	System.out.print(p.get_node()+":"+p.get_amt()+" ");
        //     }
        // 	System.out.println();
            while(pq.size()>1) {
            	temp.add(pq.poll());
            }
            Pair creditor = pq.poll();
            pq = temp;
        //     for(Pair p: pq) {
        //     	System.out.print(p.get_node()+":"+p.get_amt()+" ");
        //     }
        // 	System.out.println();
            int pd = debitor.get_node();
            int md = Math.abs(debitor.get_amt());
            int pc = creditor.get_node();
            int mc = Math.abs(creditor.get_amt());
            int x = Math.min(mc, md);
            res[pd][pc] = x;
//            for(Pair p: pq) {
//            	System.out.print(p.get_node()+":"+p.get_amt()+" ");
//            }
            if(x!=mc){
                creditor.set_amt(mc - x);
                pq.add(creditor);
            }
            if(x!=md){
                debitor.set_amt(md - x);
                pq.add(debitor);
            }
//            System.out.println();
//            System.out.println(pq.size());
//            break;
        }
        for(int i = 0; i<n; i++){
            for(int j = 0; j<n; j++){
                System.out.print(res[i][j]+" ");
            }
            System.out.println();
        }
	}
}