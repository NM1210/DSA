class GFG {
    HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
    void addEdge(int u, int v){
        if(!map.containsKey(u)){
            ArrayList<Integer> list = new ArrayList<Integer>();
            list.add(v);
            map.put(u, list);
        }
        else{
            ArrayList<Integer> list = map.get(u);
            list.add(v);
            map.put(u, list);
        }
        if(!map.containsKey(v)){
            ArrayList<Integer> list = new ArrayList<Integer>();
            list.add(u);
            map.put(v, list);
        }
        else{
            ArrayList<Integer> list = map.get(v);
            list.add(u);
            map.put(v, list);
        }
        
    }
    void printGraph(){
        for(Integer node: map.keySet()){
            System.out.print(node+"->");
            for(int i = 0; i<map.get(node).size(); i++){
                System.out.print(map.get(node).get(i)+"->");
            }
            System.out.println();
        }
    }
    int sum(int degree[]){
        int sum = 0;
        for(int i = 0; i<degree.length; i++){
            sum += degree[i];
        }
        return sum;
    }
    void removeEdge(int u, int v, int degree[]){
        if(u==-1 || v==-1) return;
        degree[u] -= 1;
        degree[v] -= 1;
        map.get(u).remove(map.get(u).indexOf(v));
        map.get(v).remove(map.get(v).indexOf(u));
    }
    int traverse(int u){
        int vis[] = new int[map.size()];
        int nodes = 0;
        Queue<Integer> q = new LinkedList<>();
        vis[u] = 1;
        q.add(u);
        while(!q.isEmpty()){
            int curr = q.poll();
            if(map.containsKey(curr)){
                for(int i = 0; i<map.get(curr).size(); i++){
                    if(map.get(curr).get(i)!=-1 && vis[map.get(curr).get(i)]==0){
                        vis[map.get(curr).get(i)] = 1;
                        q.add(map.get(curr).get(i));
                        nodes++;
                    }
                }
            }
        }
        return nodes;
    }
    boolean isBridge(int u, int v){
        int N = traverse(u);
        int index = map.get(u).indexOf(v);
        map.get(u).set(index, -1);
        int nodes = traverse(u);
        map.get(u).set(index, v);
        if(nodes<N) return true;
        return false;
    }
    boolean dfsUtil(int start, int degree[]){
        System.out.println(sum(degree));
        if(sum(degree)==0) return true;
        if(map.containsKey(start)){
            if(map.get(start).size()==1){
                int next = map.get(start).get(0);
                removeEdge(start, next, degree);
                if(dfsUtil(next, degree)) return true;
            }
            else{
                for(int i = 0; i<map.get(start).size(); i++){
                    if(isBridge(start, map.get(start).get(i))){
                        continue;
                    }
                    else{
                        int next = map.get(start).get(i);
                        removeEdge(start, next, degree);
                        if(dfsUtil(next, degree)) return true;
                    }
                }
            }
        }
        return false;
    }
	public static void main (String[] args) {
		GFG graph = new GFG();
		graph.addEdge(0, 1);
		graph.addEdge(0, 2);
		graph.addEdge(0, 3);
		graph.addEdge(1, 2);
		graph.addEdge(1, 3);
		graph.addEdge(2, 3);
		graph.addEdge(2, 4);
		graph.addEdge(3, 4);
		graph.printGraph();
		int start = -1;
		int n = graph.map.size();
		int degree[] = new int[n];
		for(int i = 0; i<n; i++){
		    degree[i] = graph.map.get(i).size();
		    if(degree[i]%2!=0 && start==-1){
		        start = i;
		    }
		}
		for(int i = 0; i<n; i++){
		    System.out.print(degree[i]+" ");
		}
		System.out.println();
		if(start==-1) System.out.println(graph.dfsUtil(0, degree));
		else System.out.println(graph.dfsUtil(start, degree));
	}
}