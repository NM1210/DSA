/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int count;
    void dfs(TreeNode node, int k){
        if(node==null) return;
        if(node.val - k==0) count++;
        dfs(node.left, k-node.val);
        dfs(node.right, k-node.val);
    }
    void bfs(TreeNode root, int k){
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            TreeNode node = q.remove();
            // System.out.print(node.val+" ");
            if(node.left!=null) q.add(node.left);
            if(node.right!=null) q.add(node.right);
            dfs(node, k);
        }
    }
    public int pathSum(TreeNode root, int k) {
        if(root==null) return 0;
        count = 0;
        bfs(root, k);
        return count;
    }
}