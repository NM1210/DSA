/*
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
________________________________________________________________________________________________
O(N):-

class Index{
    int index = 0;
}
class Solution {
    Index preIndex = new Index();
    TreeNode construct(int[] pre, Index preIndex, int key, int min, int max, int n){
        if(preIndex.index>=n) return null;
        TreeNode root = null;
        if(key>min && key<max){
            root = new TreeNode(key);
            preIndex.index = preIndex.index+1;
            if(preIndex.index<n){
                root.left = construct(pre, preIndex, pre[preIndex.index], min, key, n);
            }
            if(preIndex.index<n){
                root.right = construct(pre, preIndex, pre[preIndex.index], key, max, n);
            }
        }
        return root;
    }
    public TreeNode bstFromPreorder(int[] pre) {
        int n = pre.length;
        return construct(pre, preIndex, pre[0], Integer.MIN_VALUE, Integer.MAX_VALUE, n);
    }
}
_________________________________________________________________________
O(N^2):-

class Solution {
    TreeNode root;
    int find(int[] pre, int s, int e){
        int j = s+1;
        while(j<=e && pre[j]<pre[s]) j++;
        return j;
    }
    TreeNode construct(int[] pre, TreeNode node, int s, int e){
        if(e<s) return null;
        if(node==null) node = new TreeNode(pre[s]);
        int j = find(pre, s, e);
        node.left = construct(pre, node.left, s+1, j-1);
        node.right = construct(pre, node.right, j, e);
        return node;
    }
    public TreeNode bstFromPreorder(int[] pre) {
        int n = pre.length;
        root = construct(pre, root, 0, n-1);
        return root;
    }
}
__________________________________________________________________________
O(N^3):-

class Solution {
    
    int find(int node, int[] in){
        for(int i = 0; i<in.length; i++){
            if(in[i]==node) return i;
        }
        return -1;
    }
    
    void place(TreeNode node, TreeNode index, int i, int[] in){
        if(i<index.val){
            if(index.left==null){
                index.left = new TreeNode(i);
                node.left = new TreeNode(in[i]);
            }
            else{
                place(node.left, index.left, i, in);
            }
        }
        if(i>index.val){
            if(index.right==null){
                index.right = new TreeNode(i);
                node.right = new TreeNode(in[i]);
            }
            else{
                place(node.right, index.right, i, in);
            }
        }
    }
    
    public TreeNode bstFromPreorder(int[] preorder) {
        int n = preorder.length;
        int[] inorder = new int[n];
        for(int i = 0; i<n; i++){
            inorder[i] = preorder[i];
        }
        Arrays.sort(inorder);
        TreeNode root = new TreeNode(preorder[0]);
        TreeNode index = new TreeNode(find(preorder[0], inorder));
        for(int i = 1; i<n; i++){
            place(root, index, find(preorder[i], inorder), inorder);
        }
        return root;
    }
}