// class Node  
// { 
//     int data; 
//     Node left, right; 
   
//     public Node(int d)  
//     { 
//         data = d; 
//         left = right = null; 
//     } 
// }

class Solution
{
    ArrayList<Integer> list = new ArrayList<>();
    void left(Node node){
        if(node==null) return;
        if(node.left!=null){
            list.add(node.data);
            left(node.left);
        }
        else if(node.right!=null){
            list.add(node.data);
            left(node.right);
        }
    }
    void leaf(Node node){
        if(node==null) return;
        if(node.left==null && node.right==null){
            list.add(node.data);
        }
        leaf(node.left);
        leaf(node.right);
    }
    void right(Node node){
        if(node==null) return;
        if(node.right!=null){
            right(node.right);
            list.add(node.data);
        }
        else if(node.left!=null){
            right(node.left);
            list.add(node.data);
        }
    }
	ArrayList <Integer> printBoundary(Node root)
	{
	    list.add(root.data);
	    left(root.left);
	    leaf(root);
	    right(root.right);
	    return list;
	}
}