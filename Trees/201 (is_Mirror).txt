class Solution {
    static int checkMirrorTree(int n, int e, int[] A, int[] B) {
        int u1[] = new int[e];
        int v1[] = new int[e];
        int u2[] = new int[e];
        int v2[] = new int[e];
        int u = 0;
        int v = 0;
        for(int i = 0; i<A.length; i++){
            if(i%2==0) u1[u++] = A[i];
            else v1[v++] = A[i];
        }
        u = 0;
        v = 0;
        for(int i = 0; i<B.length; i++){
            if(i%2==0) u2[u++] = B[i];
            else v2[v++] = B[i];
        }
        // for(int i = 0; i<u; i++){
        //     System.out.print(u1[i]+" "+v1[i]+" ");
        // }
        // System.out.println();
        // for(int i = 0; i<u; i++){
        //     System.out.print(u2[i]+" "+v2[i]+" ");
        // }
        // System.out.println();
        HashMap<Integer, Stack<Integer>> map = new HashMap<>();
        for(int i = 0; i<e; i++){
            if(!map.containsKey(u1[i])){
                Stack<Integer> temp = new Stack<>();
                temp.push(v1[i]);
                map.put(u1[i], temp);
            }
            else{
                map.get(u1[i]).push(v1[i]);
            }
        }
        for(int i = 0; i<e; i++){
            if(map.containsKey(u2[i]) && map.get(u2[i]).size()>0){
                if(map.get(u2[i]).peek() != v2[i]){
                    return 0;
                }
                map.get(u2[i]).pop();
            }
        }
        return 1;
    }
}
____________________________________________________________________________________
class Solution {
    static int checkMirrorTree(int n, int e, int[] A, int[] B) {
        
        List<Stack<Integer>> s = new ArrayList<>();
        List<Queue<Integer>> q = new ArrayList<>();
 
        for (int i = 0; i <= n; i++) {
            s.add(new Stack<>());
            Queue<Integer> queue = new LinkedList<>();
            q.add(queue);
        }
 
        for (int i = 0; i < 2 * e; i += 2) {
            s.get(A[i]).push(A[i + 1]);
            q.get(B[i]).add(B[i + 1]);
        }
        
        for (int i = 1; i <= n; i++) {
            while (!s.get(i).isEmpty() && !q.get(i).isEmpty()) {
                int a = s.get(i).pop();
                int b = q.get(i).poll();
                if (a != b) {
                    return 0;
                }
            }
        }
        
        return 1;
    }
}