BOTTOM-UP:-

class Solution
{
    //Function to find the maximum number of cuts.
    public int maximizeCuts(int n, int x, int y, int z)
    {
       int dp[] = new int[n+1];
       Arrays.fill(dp, -1);
       dp[0] = 0;
       for(int i = 1; i<=n; i++){
           int temp = -1;
           if(i-x>=0 && i-y>=0 && i-z>=0){
               temp = Math.max(dp[i-x], Math.max(dp[i-y], dp[i-z]));
               if(temp!=-1) dp[i] = temp+1;
           }
           else if(i-x<0 && i-y>=0 && i-z>=0){
               temp = Math.max(dp[i-y], dp[i-z]);
               if(temp!=-1) dp[i] = temp+1;
           }
           else if(i-x>=0 && i-y<0 && i-z>=0){
               temp = Math.max(dp[i-x], dp[i-z]);
               if(temp!=-1) dp[i] = temp+1;
           }
           else if(i-x>=0 && i-y>=0 && i-z<0){
               temp = Math.max(dp[i-x], dp[i-y]);
               if(temp!=-1) dp[i] = temp+1;
           }
           else if(i-x<0 && i-y<0 && i-z>=0){
               temp = dp[i-z];
               if(temp!=-1) dp[i] = temp+1;
           }
           else if(i-x>=0 && i-y<0 && i-z<0){
               temp = dp[i-x];
               if(temp!=-1) dp[i] = temp+1;
           }
           else if(i-x<0 && i-y>=0 && i-z<0){
               temp = dp[i-y];
               if(temp!=-1) dp[i] = temp+1;
           }
           
       }
       if(dp[n]==-1) return 0;
       return dp[n];
    }
}