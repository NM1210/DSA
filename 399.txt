/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;

class GFG {
    static boolean bipartite_bfs(int G[][]) {
        int n = G.length;
		int colors[] = new int[n];
		Arrays.fill(colors, -1);
		Queue<Integer> q = new LinkedList<>();
// 		for(int i = 0; i<n; i++) {
			int color = 0;
// 			if(colors[i]==-1) {
				colors[0] = color;
				q.add(0);
				while(!q.isEmpty()) {
					int at = q.poll();
					color = (colors[at]==0) ? 1 : 0;
					for (int j = 0; j<n; j++) {
					    if(G[at][j]==1){
					        if(colors[j]==-1) {
							    colors[j] = color;
							    q.add(j);
						    }
						    else if(colors[j]!=color){
							    return false;
						    }
					    }
					}
				}
// 			}
// 		}
		return true;
	}
	public static void main (String[] args) {
		int G[][] = {{0, 1, 1, 1, 0},
                     {1, 0, 1, 0, 0},
                     {1, 1, 0, 0, 0},
                     {1, 0, 0, 0, 1},
                     {0, 0, 0, 1, 0}
                    };
        int n = G.length;
        int complement[][] = new int[n][n];
        for(int i = 0; i<n; i++){
            for(int j = 0; j<n; j++){
                if(i!=j){
                    if(G[i][j]==0) complement[i][j] = 1;
                    else complement[i][j] = 0;
                }
            }
        }
        for(int i = 0; i<n; i++){
            for(int j = 0; j<n; j++){
                System.out.print(complement[i][j]+" ");
            }
            System.out.println();
        }
        System.out.println(bipartite_bfs(complement));
	}
}