class Result {
    HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
    /*
     * Complete the 'journeyToMoon' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. 2D_INTEGER_ARRAY astronaut
     */
    void addEdge(int u, int v){
        if(!map.containsKey(u)){
            ArrayList<Integer> list = new ArrayList<Integer>();
            list.add(v);
            map.put(u, list);
        }
        else{
            ArrayList<Integer> list = map.get(u);
            list.add(v);
            map.put(u, list);
        }
        if(!map.containsKey(v)){
            ArrayList<Integer> list = new ArrayList<Integer>();
            list.add(u);
            map.put(v, list);
        }
        else{
            ArrayList<Integer> list = map.get(v);
            list.add(u);
            map.put(v, list);
        }
    }
    // void printGraph() {
    //     for(int i: map.keySet()){
    //         System.out.print(i+"->");
    //         for(int j = 0; j<map.get(i).size(); j++){
    //             System.out.print(map.get(i).get(j)+"->");
    //         }
    //         System.out.println();
    //     }
    // }
    void bfs(int start, int[] vis, int color){
        vis[start] = color;
        Queue<Integer> q = new LinkedList<Integer>();
        q.add(start);
        while(!q.isEmpty()){
            int curr = q.poll();
            if(map.containsKey(curr)){
                for(int i = 0; i<map.get(curr).size(); i++){
                    if(vis[map.get(curr).get(i)]==0){
                        vis[map.get(curr).get(i)]=color;
                        q.add(map.get(curr).get(i));
                    }
                }
            }
        }
    }
    public static int journeyToMoon(int n, List<List<Integer>> astronaut) {
        int count = 0;
        Result graph = new Result();
        for(int i = 0; i<astronaut.size(); i++){
            graph.addEdge(astronaut.get(i).get(0), astronaut.get(i).get(1));
        }
        // graph.printGraph();
        int array[] = new int[n];
        int color = 1;
        for(int i = 0; i<array.length; i++){
            if(graph.map.containsKey(i)){
                if(array[i]==0){
                    graph.bfs(i, array, color);
                    color++;
                }   
            }
        }
        // for(int i = 0; i<array.length; i++){
        //     System.out.print(array[i]);
        // }
        for(int i = 0; i<=n; i++){
            for(int j = i+1; j<n; j++){
                if(array[i]==0){
                    count++;
                }
                else{
                    if(array[j]!=array[i]){
                    count++;
                    }
                }
                
            }
        }
        return count;
    }
}