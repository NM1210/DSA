class Node{
    char ch;
    int freq;
    Node left, right;
    Node(char ch, int freq){
        this.ch = ch;
        this.freq = freq;
    }
    Node(int freq){
        this.freq = freq;
    }
}
class comp implements Comparator<Node>{
    public int compare(Node n1, Node n2){
        return n1.freq - n2.freq;
    }
}
class Solution {
    ArrayList<String> list = new ArrayList<>();
    void traverse(Node root, String str){
        if(root==null) return;
        if(root.ch!='\u0000') list.add(str);
        traverse(root.left, str+"0");
        traverse(root.right, str+"1");
    }
    public ArrayList<String> huffmanCodes(String s, int f[], int n)
    {
        PriorityQueue<Node> pq = new PriorityQueue<>(n, new comp());
        for(int i = 0; i<n; i++){
            pq.add(new Node(s.charAt(i), f[i]));
        }
        // System.out.println(pq.size());
        // while(!pq.isEmpty()){
        //     Node t = pq.remove();
        //     System.out.println(t.ch+" "+t.freq);
        // }
        while(pq.size()!=1){
            Node t1 = pq.remove();
            Node t2 = pq.remove();
            Node temp = new Node(t1.freq+t2.freq);
            temp.left = t1;
            temp.right = t2;
            pq.add(temp);
        }
        Node root = pq.remove();
        String str = "";
        this.traverse(root, str);
        // System.out.println(root.ch+" "+root.freq);
        // System.out.println(root.ch=='\u0000');
        return list;
    }
}