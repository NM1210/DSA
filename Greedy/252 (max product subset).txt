public class Solution {
	public static long maxProductSubset(int[] a, int n) {
        long p = (long)Math.pow(10, 9)+7;
        int neg = 0, pos = 0;
        boolean zero = false;
        long prod = 1;
        for(int i = 0; i<n; i++){
            if(a[i]<0) neg += 1;
            else if(a[i]>0) pos += 1;
            else zero = true;
        }
		Arrays.sort(a);
        if(!zero){
            if(neg%2==0){
                for(int i = 0; i<n; i++) prod = (prod*a[i])%p;
            }
            else{
                int i = 0;
                while(i<neg-1) prod = (prod*a[i++])%p;
                i = neg;
                while(i<n) prod = (prod*a[i++])%p;
            }
        }
        else{
            if(neg%2==0){
                if(neg==0 && pos==0) prod = 0;
                else{
                    for(int i = 0; i<n; i++){
                        if(a[i]!=0) prod = (prod*a[i])%p;
                    } 
                }
            }
            else{
                if(neg==1 && pos==0) prod = 0;
                else{
                    int i = 0;
                	while(i<neg-1) prod = (prod*a[i++])%p;
                	i = neg;
                	while(i<n){
                        if(a[i]!=0) prod = (prod*a[i])%p;
                        i++;
                    } 
                }
            }
        }
		return prod%p;
	}
}