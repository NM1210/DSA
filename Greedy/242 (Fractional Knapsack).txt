/*
class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}
*/

class Solution
{
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item a[], int n) 
    {
        double profit = 0;
        float items[][] = new float[n][3];
        for(int i = 0; i<n; i++){
            items[i][0] = a[i].value;
            items[i][1] = a[i].weight;
            items[i][2] = items[i][0]/items[i][1];
        }
        // for(int i = 0; i<n; i++){
        //     System.out.println(items[i][0]+" "+items[i][1]+" "+items[i][2]);
        // }
        Arrays.sort(items, new Comparator<float[]>(){
            public int compare(float[] a, float[] b){
                if(a[2]>b[2]) return 1;
                else if(a[2]<b[2]) return -1;
                else return 0;
            }
        });
        // for(int i = 0; i<n; i++){
        //     System.out.println(items[i][0]+" "+items[i][1]+" "+items[i][2]);
        // }
        int i = n-1;
        while(i>=0 && W>=items[i][1]){
            profit += items[i][0];
            W -= items[i][1];
            i--;
        }
        if(i>=0) profit += (W/items[i][1])*items[i][0];
        return profit;
    }
}