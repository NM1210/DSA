class GfG
{
    static class TrieNode {
        TrieNode[] children = new TrieNode[2];
        boolean isEnd;
        TrieNode() {
            isEnd = false;
            for (int i = 0; i < 2; i++) children[i] = null;
        }
    }
    
    static void insert(TrieNode root, int[] row)
    {
        int n = row.length;
        TrieNode curr = root;
        for(int i = 0; i<n; i++){
            int index = row[i];
            if(curr.children[index]==null)
                curr.children[index] = new TrieNode();
            curr = curr.children[index];
        }
        curr.isEnd = true;
    }
    
    static void search(TrieNode root, ArrayList<Integer> list)
    {
        if(root.isEnd){
            // System.out.println(list);
            ArrayList<Integer> temp = new ArrayList<>();
            for(Integer i: list){
                temp.add(i);
            }
            // System.out.println(temp);
            ans.add(temp);
        }
        for(int i = 0; i<2; i++){
            if(root.children[i]!=null){
                list.add(i);
                search(root.children[i], list);
                list.remove(list.size()-1);
            }
        }
    }
        
    static ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
    
    public static ArrayList<ArrayList<Integer>> uniqueRow(int a[][],int m, int n)
    {
        TrieNode root = new TrieNode();
        for(int i = 0; i<m; i++){
            insert(root, a[i]);
        }
        search(root, new ArrayList<Integer>());
        return ans;
    }
}