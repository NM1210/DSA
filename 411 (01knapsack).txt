BOTTOM-UP:-

class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int C, int wt[], int val[], int n) 
    { 
        int dp[][] = new int[n+1][C+1];
        for(int i = 1; i<dp.length; i++){
            for(int j = 1; j<dp[i].length; j++){
                if(j-wt[i-1]>=0){
                    dp[i][j] = Math.max(val[i-1]+dp[i-1][j-wt[i-1]], dp[i-1][j]);
                }
                else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        // for(int i = 0; i<=n; i++){
        //     for(int j = 0; j<=C; j+=10){
        //         System.out.print(dp[i][j]+" ");
        //     }
        //     System.out.println();
        // }
        return dp[n][C];
    } 
}
_____________________________________________________________________________________________

MEMOIZATION:-

class Solution 
{ 
    static int dp[][];
    static int knapsack01(int c, int[] v, int[] w, int n) {
		if(n==0) return 0;
		if(c==0) return 0;
		if(dp[c][n]!=-1) return dp[c][n];
		if(c-w[n-1]>=0) {
			dp[c][n] = Math.max(v[n-1]+knapsack01(c-w[n-1], v, w, n-1), knapsack01(c, v, w, n-1));
		}
		else {
			dp[c][n] = knapsack01(c, v, w, n-1);		//HIGHLIGHT
		}
		return dp[c][n];
	}
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
        dp = new int[W+1][n+1];
        for(int row[]: dp){
            Arrays.fill(row, -1);
        }
        return knapsack01(W, val, wt, n);
    } 
}
____________________________________________________________________________________________________________________________

RECURRSION:-

class Solution 
{ 
    static int knapsack01(int c, int[] v, int[] w, int n, int val) {
		if(n==0) return val;
		if(c==0) return val;
		int ans = 0;
		if(c-w[n-1]>=0) {
			ans = Math.max(knapsack01(c-w[n-1], v, w, n-1, val+v[n-1]), knapsack01(c, v, w, n-1, val));
		}
		else {
			ans = knapsack01(c, v, w, n-1, val);		//HIGHLIGHT
		}
		return ans;
	}
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
        return knapsack01(W, val, wt, n, 0);
    } 
}