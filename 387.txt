class Pair implements Comparator<Pair>{
    private int element0;
    private int element1;

    public static Pair createPair(int element0, int element1) {
        return new Pair(element0, element1);
    }

    public Pair(int element0, int element1) {
        this.element0 = element0;
        this.element1 = element1;
    }
    
    Pair() {}

    public int getElement0() {
        return element0;
    }

    public int getElement1() {
        return element1;
    }

	@Override
	public int compare(Pair o1, Pair o2) {
		if(o1.element1<o2.element1) return -1;
		if(o1.element1>o2.element1) return 1;
		return 0;
	}
}
class Solution {
    HashMap<Integer, ArrayList<Pair>> map = new HashMap<>();
    int min_cost = Integer.MAX_VALUE;
    
    void addEdge(int u, int v, int w){
        if(!map.containsKey(u)){
            Pair pair = Pair.createPair(v, w);
            ArrayList<Pair> list = new ArrayList<Pair>();
            list.add(pair);
            map.put(u, list);
        }
        else{
            Pair pair = new Pair(v, w);
            ArrayList<Pair> list = map.get(u);
            list.add(pair);
            map.put(u, list);
        }
    }
    
    void printGraph() {
		for(Integer i: map.keySet()) {
			System.out.print(i + "->");
			for(Pair node : map.get(i)) {
				System.out.print("("+node.getElement0()+","+node.getElement1()+")->");
			}
			System.out.println();
		}
	}
    
    void dfs(int start, int[] vis, int end, int moves, int limit, int cost){
        // System.out.println(cost);
        if(moves-1>limit) return;
        if(start==end){
            if(cost<min_cost){
                min_cost = cost;
            }
            return;
        }
        if(map.containsKey(start)){
            for(Pair node: map.get(start)){
                if(vis[node.getElement0()]==0){
                    vis[node.getElement0()] = 1;
                    dfs(node.getElement0(), vis, end, moves+1, limit, cost+node.getElement1());
                    vis[node.getElement0()] = 0;
                }
            }
        }
    }
    
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        for(int i = 0; i<flights.length; i++){
            addEdge(flights[i][0], flights[i][1], flights[i][2]);
        }
        printGraph();
        int vis[] = new int[n];
        vis[src] = 1;
        dfs(src, vis, dst, 0, k, 0);
        if(min_cost!=Integer.MAX_VALUE) return min_cost;
        return -1;
    }
}